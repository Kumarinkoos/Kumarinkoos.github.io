<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo-next博客搭建</title>
    <url>/2022/01/01/Build_hexo-next_Blog/</url>
    <content><![CDATA[<p>本篇以记录为主，记录自己搭建hexo+next时候所配置功能的过程，所以并没有把所有的功能都配置上去，现在所看到的的博客就是根据接下来记录的来配置的。（无音乐播放器，无live2D，无鼠标特效等等）</p>
<p>这是我目前觉得比较简洁平衡的配置了，尽管如此，还是有许多不太满意的地方，<del>比如我还希望能够点击头像回到首页的功能。</del>（已经实现，虽然可能不是正确的改法）</p>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>※之前在查找资料的时候经常能看见诸如还在用hexo？next已经烂大街了之类的言论，但我认为，对于一般人来说并不需要去在意什么烂不烂大街，自己能够搭建起来就好，个人博客重要的是里面的内容，而不是去追求一些花里胡哨的功能，hexo和next说白了只是提供了一个平台和一个模板而已。</p>
<p>※<strong>nodejs版本：16.14.2</strong></p>
<p>※<strong>hexo版本：5.4.2</strong></p>
<p>※<strong>next版本：7.8.0</strong></p>
<p>下面把Blog下的_config.yml文件简称为<font color=red>站点配置文件</font></p>
<p>把next下的_config.yml文件简称为<font color=blue>主题配置文件</font></p>
<hr>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>1.Nodejs下载并安装</p>
<p>2.Git下载并安装</p>
<p>3.使用Git设置淘宝镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>4.使用Git安装hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>5.新建Blog文件夹</p>
<p>6.在Blog文件夹下使用Git初始化hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p>7.使用Git静态部署</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>8.使用Git启动网页</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>9.下载next主题，<a href="https://github.com/theme-next/hexo-theme-next">下载地址</a>，推荐使用Git Bash下载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="站点基本属性的编辑和主题的修改"><a href="#站点基本属性的编辑和主题的修改" class="headerlink" title="站点基本属性的编辑和主题的修改"></a>站点基本属性的编辑和主题的修改</h2><h3 id="编辑基本信息"><a href="#编辑基本信息" class="headerlink" title="编辑基本信息"></a>编辑基本信息</h3><p>在<font color=red><font color=red>站点配置文件</font></font>编辑基本信息</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">ゆるる</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">LAST</span> <span class="string">STARDUST</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">摇曳Kumarinko</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br></pre></td></tr></table></figure>

<h3 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h3><p>在<font color=red>站点配置文件</font>修改主题为next</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>

<h2 id="主题优化"><a href="#主题优化" class="headerlink" title="主题优化"></a>主题优化</h2><h3 id="主题选择"><a href="#主题选择" class="headerlink" title="主题选择"></a>主题选择</h3><p>编辑<font color=blue>主题配置文件</font>，一共四项主题可以选择，我选择的是Gemini。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br></pre></td></tr></table></figure>

<h3 id="首页不显示全文"><a href="#首页不显示全文" class="headerlink" title="首页不显示全文"></a>首页不显示全文</h3><p>1.官方建议在写文章的时候加入以下代码，代码以上为首页可见，代码一下为首页不可见。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>

<p>2.编辑<font color=blue>主题配置文件</font>，把variable取消注释</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="attr">variable:</span> <span class="string">source/_data/variables.styl</span></span><br></pre></td></tr></table></figure>

<p>3.变更阅读全文按钮样式，在站点的source下新建_data文件夹，再在里面新建variables.styl，加入以下代码</p>
<figure class="highlight styl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Buttons</span></span><br><span class="line"><span class="variable">$btn</span>-default-bg                 = white;</span><br><span class="line"><span class="variable">$btn</span>-default-<span class="attribute">color</span>              = <span class="number">#006762</span>;</span><br><span class="line"><span class="variable">$btn</span>-default-<span class="attribute">font-size</span>          = <span class="variable">$font</span>-size-small;</span><br><span class="line"><span class="variable">$btn</span>-default-<span class="attribute">border-width</span>       = <span class="number">2px</span>;</span><br><span class="line"><span class="variable">$btn</span>-default-<span class="attribute">border-color</span>       = <span class="number">#006762</span>;</span><br><span class="line"><span class="variable">$btn</span>-default-hover-bg           = <span class="number">#456f95</span>;</span><br><span class="line"><span class="variable">$btn</span>-default-hover-<span class="attribute">color</span>        = white;</span><br><span class="line"><span class="variable">$btn</span>-default-hover-<span class="attribute">border-color</span> = <span class="number">#456f95</span>;</span><br></pre></td></tr></table></figure>

<h3 id="侧边菜单栏设定"><a href="#侧边菜单栏设定" class="headerlink" title="侧边菜单栏设定"></a>侧边菜单栏设定</h3><p>1.编辑<font color=blue>主题配置文件</font>，把需要的菜单取消注释</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>

<p>2.在Git下创建对应的页面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page about</span><br><span class="line">hexo new page tags</span><br><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>

<p>3.对应的网页的markdown在站点的source文件夹下，tags和categories的markdown需要加入对应的type，about就像普通写文章一样就行。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">type: &quot;categories&quot;</span><br></pre></td></tr></table></figure>

<h3 id="背景以及各板块透明度设定"><a href="#背景以及各板块透明度设定" class="headerlink" title="背景以及各板块透明度设定"></a>背景以及各板块透明度设定</h3><p>1.编辑<font color=blue>主题配置文件</font>，把style取消注释</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>

<p>2.在之前创建的_data下新建styles.styl文件，添加以下代码，透明度随自己设定</p>
<figure class="highlight styl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Custom styles.</span></span><br><span class="line"><span class="comment">// 整体背景设置</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>:url(/images/background.jpg);<span class="comment">// 设定背景图片,images同处于source文件夹下</span></span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;<span class="comment">// 设定背景图片非重复填充</span></span><br><span class="line">    <span class="attribute">background-attachment</span>:fixed;<span class="comment">// 设置背景图片不随页面滚动</span></span><br><span class="line">    <span class="attribute">background-position</span>:<span class="number">50%</span> <span class="number">50%</span>;<span class="comment">// 设置背景图片位置</span></span><br><span class="line"> <span class="attribute">background-size</span>: cover// 设置保持图像的纵横比并将图像缩放成将完全覆盖背景定位区域的最小大小</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 页面头样式属性</span></span><br><span class="line"><span class="selector-class">.header-inner</span> &#123;</span><br><span class="line">  <span class="comment">// 也可以同时定义背景色</span></span><br><span class="line">  <span class="comment">// background: #DDD </span></span><br><span class="line">  <span class="comment">// 透明度</span></span><br><span class="line">  <span class="comment">//opacity: 0.9;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// sidebar侧边工具栏样式属性</span></span><br><span class="line">.sidebar&#123;</span><br><span class="line">    <span class="comment">// 动画过渡时间</span></span><br><span class="line"> <span class="attribute">transition-duration</span>: <span class="number">1.0s</span>;</span><br><span class="line">    <span class="comment">// 透明度</span></span><br><span class="line"> <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 标题样式</span></span><br><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-title-link</span> &#123;</span><br><span class="line"> <span class="comment">// 设置字体颜色</span></span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#222</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文章版块样式</span></span><br><span class="line"><span class="selector-class">.post-block</span> &#123;</span><br><span class="line"> <span class="attribute">background</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.7</span>); <span class="comment">//0.7是透明度</span></span><br><span class="line">    <span class="attribute">border-radius</span>: initial;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">2px</span> <span class="number">0</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.12</span>), <span class="number">0</span> <span class="number">3px</span> <span class="number">1px</span> -<span class="number">2px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.06</span>), <span class="number">0</span> <span class="number">1px</span> <span class="number">5px</span> <span class="number">0</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.12</span>);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 主页文章添加阴影效果</span></span><br><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line">   <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">   -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, .<span class="number">5</span>);</span><br><span class="line">   -moz-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> rgba(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, .<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.在站点的source下，新建images文件夹，把要放的背景图放在这个文件夹里</p>
<h3 id="头像设定"><a href="#头像设定" class="headerlink" title="头像设定"></a>头像设定</h3><p>编辑<font color=blue>主题配置文件</font>，第一个选项是图片地址（themes\next\source\images\avatar.gif），第二个选项是把头像变圆，第三个选项是鼠标放上面头像会旋转。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.gif</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="网页右上角的fork-me-on-github"><a href="#网页右上角的fork-me-on-github" class="headerlink" title="网页右上角的fork me on github"></a>网页右上角的fork me on github</h3><p>编辑<font color=blue>主题配置文件</font>，编辑github_banner</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class="line"><span class="attr">github_banner:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">permalink:</span> <span class="string">https://github.com/Kumarinkoos</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Follow</span> <span class="string">me</span> <span class="string">on</span> <span class="string">GitHub</span></span><br></pre></td></tr></table></figure>

<h3 id="阅读进度百分比设定"><a href="#阅读进度百分比设定" class="headerlink" title="阅读进度百分比设定"></a>阅读进度百分比设定</h3><p>1.编辑<font color=blue>主题配置文件</font>，编辑back2top，第一个选项是使能，第二个是侧边显示，右下方显示。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>2.编辑上方阅读条使能</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#37c6c0&quot;</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">3px</span></span><br></pre></td></tr></table></figure>

<h3 id="阅读位置标记"><a href="#阅读位置标记" class="headerlink" title="阅读位置标记"></a>阅读位置标记</h3><p>1.下载模块到source/lib目录下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-bookmark.git <span class="built_in">source</span>/lib/bookmark</span><br></pre></td></tr></table></figure>

<p>2.编辑<font color=blue>主题配置文件</font>，启用bookmark模块</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">bookmark:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Customize the color of the bookmark.</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#222&quot;</span></span><br><span class="line">  <span class="comment"># If auto, save the reading progress when closing the page or clicking the bookmark-icon.</span></span><br><span class="line">  <span class="comment"># If manual, only save it by clicking the bookmark-icon.</span></span><br><span class="line">  <span class="attr">save:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure>

<h3 id="统计字数和阅读时长"><a href="#统计字数和阅读时长" class="headerlink" title="统计字数和阅读时长"></a>统计字数和阅读时长</h3><p>1.下载模块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>

<p>2.编辑<font color=red>站点配置文件</font>，添加代码</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"> <span class="comment">#文章内是否显示</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span> </span><br><span class="line"> <span class="comment"># 网页底部是否显示</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">false</span> </span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">false</span> </span><br></pre></td></tr></table></figure>

<p>3.编辑<font color=blue>主题配置文件</font>，编辑代码</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span></span><br></pre></td></tr></table></figure>

<h3 id="代码块复制和代码高亮设定"><a href="#代码块复制和代码高亮设定" class="headerlink" title="代码块复制和代码高亮设定"></a>代码块复制和代码高亮设定</h3><p>编辑<font color=blue>主题配置文件</font>，编辑codeblock，（注：markdown编写代码的时候在```之后加上使用的语言就可以实现变色。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">night</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span></span><br></pre></td></tr></table></figure>

<h3 id="显示图片"><a href="#显示图片" class="headerlink" title="显示图片"></a>显示图片</h3><p>编辑<font color=red>站点配置文件</font>，启用 post_asset_folder</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="图片放大预览"><a href="#图片放大预览" class="headerlink" title="图片放大预览"></a>图片放大预览</h3><p>编辑<font color=blue>主题配置文件</font>，启用 fancybox</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="网站图标设定"><a href="#网站图标设定" class="headerlink" title="网站图标设定"></a>网站图标设定</h3><p>编辑<font color=blue>主题配置文件</font>，编辑favicon，把图片放到themes\next\source\images文件夹下再对应修改（和头像一个文件夹）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon-16x16-next.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/favicon-32x32-next.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/apple-touch-icon-next.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/logo.svg</span></span><br><span class="line">  <span class="comment">#android_manifest: /images/manifest.json</span></span><br><span class="line">  <span class="comment">#ms_browserconfig: /images/browserconfig.xml</span></span><br></pre></td></tr></table></figure>

<h3 id="边栏计数徽章"><a href="#边栏计数徽章" class="headerlink" title="边栏计数徽章"></a>边栏计数徽章</h3><p>编辑<font color=blue>主题配置文件</font>，badges改为true</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu_settings:</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">badges:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="社交设定"><a href="#社交设定" class="headerlink" title="社交设定"></a>社交设定</h3><p>编辑<font color=blue>主题配置文件</font>，把自己想要设定的选项前面的#去掉，fab fa-xxx为<a href="https://fontawesome.com/">Font Awesome</a>的图库</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/yourname</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">  <span class="comment">#E-Mail: mailto:yourname@gmail.com || fa fa-envelope</span></span><br><span class="line">  <span class="comment">#Weibo: https://weibo.com/yourname || fab fa-weibo</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || fab fa-google</span></span><br></pre></td></tr></table></figure>

<h3 id="打赏设定"><a href="#打赏设定" class="headerlink" title="打赏设定"></a>打赏设定</h3><p>编辑<font color=blue>主题配置文件</font>。编辑reward添加二维码。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Reward (Donate)</span></span><br><span class="line"><span class="comment"># Front-matter variable (unsupport animation).</span></span><br><span class="line"><span class="attr">reward_settings:</span></span><br><span class="line">  <span class="comment"># If true, reward will be displayed in every article by default.</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">animation:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">comment:</span> <span class="string">&#x27;谢谢你的投食~~&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">wechatpay:</span> <span class="string">/images/wechatpay.png</span></span><br><span class="line">  <span class="attr">alipay:</span> <span class="string">/images/alipay.png</span></span><br><span class="line">  <span class="comment">#paypal: /images/paypal.png</span></span><br><span class="line">  <span class="comment">#bitcoin: /images/bitcoin.png</span></span><br></pre></td></tr></table></figure>

<h3 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h3><p>1.下载安装插件,之后在markdown文章里加入top：就行，数字越大置顶等级越高。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure>

<p>2.在next的layout的_macro里的post.swig里添加代码，添加到POST BLOCK的最后（POST BODY之前）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">  &lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;font color=7D26CD&gt;置顶&lt;/font&gt;</span><br><span class="line">  &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文章结束添加本文结束的小字"><a href="#文章结束添加本文结束的小字" class="headerlink" title="文章结束添加本文结束的小字"></a>文章结束添加本文结束的小字</h3><p>1.编辑<font color=blue>主题配置文件</font>，把postBodyEnd取消注释</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="attr">postBodyEnd:</span> <span class="string">source/_data/post-body-end.swig</span></span><br></pre></td></tr></table></figure>

<p>2.在之前创建的_data下新建post-body-end.swig文件，添加以下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-hand-peace-o&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="底部标签样式设定"><a href="#底部标签样式设定" class="headerlink" title="底部标签样式设定"></a>底部标签样式设定</h3><p>编辑<font color=blue>主题配置文件</font>，编辑tag_icon为true</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Use icon instead of the symbol # to indicate the tag at the bottom of the post</span></span><br><span class="line"><span class="attr">tag_icon:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h3><p>编辑<font color=blue>主题配置文件</font>，编辑copyright,以及creative_commons。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure>

<h3 id="无视README-md"><a href="#无视README-md" class="headerlink" title="无视README.md"></a>无视README.md</h3><p>编辑<font color=red>站点配置文件</font></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> <span class="string">README.md</span></span><br></pre></td></tr></table></figure>

<p>在source里放上自己的README.md，这样就不会转化README.md文件，在gitee或者github就能正常显示了。</p>
<h3 id="※点击头像返回首页"><a href="#※点击头像返回首页" class="headerlink" title="※点击头像返回首页"></a>※点击头像返回首页</h3><p>※结合网上老版本next的方法，自己试出来的，有一定问题，但功能能够实现（我没学过前端）</p>
<p>1.直接在主题文件夹的layout_macro\sidebar.swig里面</p>
<p>代码div class=”sidebar-inner”下方加入以下代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;site-author-image&quot;</span> <span class="attr">itemprop</span>=<span class="string">&quot;image&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for( theme.avatar.url | default(theme.images + &#x27;/avatar.gif&#x27;) ) &#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">alt</span>=<span class="string">&quot;&#123;&#123; author &#125;&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.如果这个时候刷新页面的话会发现头像会有两个，一个是能够实现点击返回首页的，一个是不能够返回首页的，接下来把之前头像设定那边的设定的url给注释掉，就只剩下一个能够返回首页的头像了</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="comment">#url: /images/avatar.gif</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h2><h3 id="搜索功能（本地搜索）"><a href="#搜索功能（本地搜索）" class="headerlink" title="搜索功能（本地搜索）"></a>搜索功能（本地搜索）</h3><p>1.安装 hexo-generator-searchdb</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>2.编辑<font color=red>站点配置文件</font>，新增代码</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>3.编辑<font color=blue>主题配置文件</font>，启用本地搜索功能</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="数据统计与分析（不蒜子）"><a href="#数据统计与分析（不蒜子）" class="headerlink" title="数据统计与分析（不蒜子）"></a>数据统计与分析（不蒜子）</h3><p>编辑<font color=blue>主题配置文件</font>，编辑busuanzi_count。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br></pre></td></tr></table></figure>

<h3 id="※评论系统（LiveRe）"><a href="#※评论系统（LiveRe）" class="headerlink" title="※评论系统（LiveRe）"></a>※评论系统（LiveRe）</h3><p>※个人不再配置<br>注册 <a href="https://livere.com/">来必力</a> 获取 LiveRe UID。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># LiveRe comments system</span></span><br><span class="line"><span class="attr">livere_uid:</span> <span class="comment">#在这里填入注册网址的uid代码</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="推送到github或者gitee"><a href="#推送到github或者gitee" class="headerlink" title="推送到github或者gitee"></a>推送到github或者gitee</h2><p>1.安装hexo-deployer-git插件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>2.生成密钥SSH，输入下面的代码然后敲四下回车</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<p>3.生成的文件的位置在Git上有显示，复制公钥 id_rsa.pub 文件里的内容，粘贴到github或gitee的SSH公钥里（具体教程网上有很多），具体可以参考：<a href="https://zhuanlan.zhihu.com/p/103391101">网址</a></p>
<p>5.编辑<font color=red>站点配置文件</font>，编辑deploy（可同时推送到github仓库和gitee仓库）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">       <span class="attr">github:</span> <span class="string">git@github.com:Kumarinkoos/Kumarinkoos.github.io.git</span></span><br><span class="line">       <span class="attr">gitee:</span> <span class="string">git@gitee.com:kumarinko/kumarinko.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>

<p>6.上面设定完后在Git依次执行下面的代码，其中hexo d为推送到仓库里去（需要注意的是，gitee部署网页每次需要手动更新）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://theme-next.js.org/docs/theme-settings/posts.html">next官方文档</a></p>
<p><a href="https://www.simon96.online/2018/10/12/hexo-tutorial/">【持续更新】最全Hexo博客搭建+主题优化+插件配置+常用操作+错误分析</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/102592286">从零开始搭建个人博客（超详细）</a></p>
<p><a href="https://blog.csdn.net/qq_35396510/article/details/105953460">hexo 主题 next7.8 版本配置美化</a></p>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>KingST开发板C51单片机学习笔记-Cheaper 7</title>
    <url>/2022/04/30/Study-KingST51-Cheaper7/</url>
    <content><![CDATA[<p>本篇为KingST的C51单片机的学习笔记，Cheaper 7为讲解变量的进阶知识和点阵LED。</p>
<span id="more"></span>

<h2 id="Chapter-7-变量进阶与点阵LED"><a href="#Chapter-7-变量进阶与点阵LED" class="headerlink" title="Chapter 7 变量进阶与点阵LED"></a>Chapter 7 变量进阶与点阵LED</h2><h3 id="变量进阶"><a href="#变量进阶" class="headerlink" title="变量进阶"></a>变量进阶</h3><h4 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h4><p>&emsp;&emsp;<strong>局部变量：</strong><br>函数内部声明的变量，只在本函数内有效，此函数以外不能使用，叫做局部变量。（另外函数的形参也是局部变量）</p>
<p>&emsp;&emsp;<strong>全局变量：</strong><br>在函数外部声明的变量就是全局变量。一个源程序可以包含一个或者多个函数，全局变量的作用范围是从它开始声明的位置一直到程序结束。</p>
<p>&emsp;&emsp;全局变量的副作用：<br>&emsp;&emsp;&emsp;1.降低函数的独立性，对任何一个函数的修改都可能影响到其他函数。<br>&emsp;&emsp;&emsp;2.降低函数的通用性，不利于函数的重复调用。<br>&emsp;&emsp;&emsp;3.降低程序的清晰度，每个函数执行都有可能改变全局变量的值，无法清楚判断每个时刻的全局变量的值。<br>&emsp;&emsp;&emsp;4.全局变量永久占据内存单元。</p>
<p>&emsp;&emsp;<strong>所以原则上，尽量减少全局变量的使用，能用局部变量就不用全局变量。</strong><br>当全局变量和局部变量同名，在局部变量作用域范围内，局部变量有效，但应该极力避免变量的重名。</p>
<h4 id="变量的存储类别"><a href="#变量的存储类别" class="headerlink" title="变量的存储类别"></a>变量的存储类别</h4><p>&emsp;&emsp;变量的存储类别分为自动，静态，寄存器和外部这四种，这里先介绍前两种。</p>
<p>&emsp;&emsp;<strong>自动变量：</strong>函数中的局部变量，如果不加static关键字修饰，都属于自动变量，也叫做动态变量。动态变量的关键字是auto，但一般可以省略。</p>
<p>&emsp;&emsp;<strong>静态变量：</strong>全局变量均始于静态变量，局部变量如果加了static关键字修饰的话，也是静态变量。它的特点是，在整个生存期中只赋一次初值。</p>
<p>&emsp;&emsp;在上一章中断函数相关的程序中，我们用了三个全局变量，因为i和cnt只在中断函数中使用，这里我们将其缩少至一个全局变量，另外因为我们希望i和cnt值并不是每次进入中断函数都会被重新赋值的，所以i和cnt我我们需要使用静态变量。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">include&lt;reg52.h&gt;</span><br><span class="line"></span><br><span class="line">sbit ADDR0 = P1^<span class="number">0</span>;</span><br><span class="line">sbit ADDR1 = P1^<span class="number">1</span>;</span><br><span class="line">sbit ADDR2 = P1^<span class="number">2</span>;</span><br><span class="line">sbit ADDR3 = P1^<span class="number">3</span>;</span><br><span class="line">sbit ENLED = P1^<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用数组来存储数码管的真值表</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> code LedChar[] = &#123;</span><br><span class="line">    <span class="number">0xC0</span>, <span class="number">0xF9</span>, <span class="number">0xA4</span>, <span class="number">0xB0</span>, <span class="number">0x99</span>, <span class="number">0x92</span>, <span class="number">0x82</span>, <span class="number">0xF8</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x90</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//数码管显示缓冲区，初值0xFF确保启动是所有数码管都不亮</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> LedBuff[<span class="number">6</span>] = &#123;</span><br><span class="line">    <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明全局变量，这里的变量main函数和中断函数都要用</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> flag1s = <span class="number">0</span>    <span class="comment">//到达1s的标志位</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//声明局部变量语句</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> sec = <span class="number">0</span>;  <span class="comment">//记录经过的秒数</span></span><br><span class="line">    <span class="comment">//执行语句</span></span><br><span class="line">    <span class="comment">//LED部分</span></span><br><span class="line">    ENLED = <span class="number">0</span>;  <span class="comment">//使能U3的74HC138</span></span><br><span class="line">    ADDR3 = <span class="number">1</span>;  <span class="comment">//因为需要动态改变ADDR0-2的值，所有不用再初始化了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//中断部分</span></span><br><span class="line">    EA = <span class="number">1</span>; <span class="comment">//使能总中断</span></span><br><span class="line">    ET0 = <span class="number">1</span>;    <span class="comment">//使能T0中断</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定时器部分</span></span><br><span class="line">    TMOD = <span class="number">0x01</span>;    <span class="comment">//设定定时器T0为模式1</span></span><br><span class="line">    TH0 = <span class="number">0xFC</span>;     <span class="comment">//T0赋值0xFC67，定时为1ms</span></span><br><span class="line">    TL0 = <span class="number">0x67</span>;</span><br><span class="line">    TR0 = <span class="number">1</span>;    <span class="comment">//启动T0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(flag1s == <span class="number">1</span>)    <span class="comment">//判断1s标志位是否为1</span></span><br><span class="line">        &#123;</span><br><span class="line">            flag1s = <span class="number">0</span>; <span class="comment">//1s标志位清零</span></span><br><span class="line">            sec++;      <span class="comment">//经过一秒秒计数加1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//以下代码将sec按十进制从低位到高位依次存到显示缓冲区中</span></span><br><span class="line">            LedBuff[<span class="number">0</span>] = LedChar[sec % <span class="number">10</span>];</span><br><span class="line">            LedBuff[<span class="number">1</span>] = LedChar[sec / <span class="number">10</span> % <span class="number">10</span>];</span><br><span class="line">            LedBuff[<span class="number">2</span>] = LedChar[sec / <span class="number">100</span> % <span class="number">10</span>];</span><br><span class="line">            LedBuff[<span class="number">3</span>] = LedChar[sec / <span class="number">1000</span> % <span class="number">10</span>];</span><br><span class="line">            LedBuff[<span class="number">4</span>] = LedChar[sec / <span class="number">10000</span> % <span class="number">10</span>];</span><br><span class="line">            LedBuff[<span class="number">5</span>] = LedChar[sec / <span class="number">10000</span> % <span class="number">10</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*定时器T0的中断函数*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InterruptTimer0</span><span class="params">()</span> interrupt 1  <span class="comment">//进入中断函数即为定时器到1ms</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//声明局部静态变量</span></span><br><span class="line">    <span class="type">static</span> <span class="type">unsigned</span> <span class="type">int</span> cnt = <span class="number">0</span>;   <span class="comment">//记录T0溢出次数</span></span><br><span class="line">    <span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> i = <span class="number">0</span>;    <span class="comment">//动态扫描的索引，即数码管的脚标</span></span><br><span class="line">    <span class="comment">//定时器溢出时的中断标志位会被中断函数自动清零</span></span><br><span class="line">    TH0 = <span class="number">0xFC</span>;    <span class="comment">//定时器T0溢出后，重新赋值</span></span><br><span class="line">    TL0 = <span class="number">0x67</span>;</span><br><span class="line">    cnt++;</span><br><span class="line">    <span class="keyword">if</span>(cnt &gt;= <span class="number">1000</span> )    <span class="comment">//达到1s</span></span><br><span class="line">    &#123;</span><br><span class="line">        cnt = <span class="number">0</span>;    <span class="comment">//达到1s后计数清零</span></span><br><span class="line">        flag1s = <span class="number">1</span>;      <span class="comment">//1s标志位置1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每次1ms中断都要刷新一下数码管</span></span><br><span class="line">    <span class="comment">//以下为数码管动态扫描刷新</span></span><br><span class="line">    P0 = <span class="number">0xFF</span>;  <span class="comment">//消影</span></span><br><span class="line">    <span class="keyword">switch</span>(i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span> : ADDR2 = <span class="number">0</span>;ADDR1 = <span class="number">0</span>;ADDR0 = <span class="number">0</span>;i++;P0 = LedBuff[<span class="number">0</span>];<span class="keyword">break</span>;     <span class="comment">//第一次溢出点亮第一个数码管</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span> : ADDR2 = <span class="number">0</span>;ADDR1 = <span class="number">0</span>;ADDR0 = <span class="number">1</span>;i++;P0 = LedBuff[<span class="number">1</span>];<span class="keyword">break</span>;     <span class="comment">//第二次溢出点亮第二个数码管</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span> : ADDR2 = <span class="number">0</span>;ADDR1 = <span class="number">1</span>;ADDR0 = <span class="number">0</span>;i++;P0 = LedBuff[<span class="number">2</span>];<span class="keyword">break</span>;     <span class="comment">//第三次溢出点亮第三个数码管</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span> : ADDR2 = <span class="number">0</span>;ADDR1 = <span class="number">1</span>;ADDR0 = <span class="number">1</span>;i++;P0 = LedBuff[<span class="number">3</span>];<span class="keyword">break</span>;     <span class="comment">//第四次溢出点亮第四个数码管</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span> : ADDR2 = <span class="number">1</span>;ADDR1 = <span class="number">0</span>;ADDR0 = <span class="number">0</span>;i++;P0 = LedBuff[<span class="number">4</span>];<span class="keyword">break</span>;     <span class="comment">//第五次溢出点亮第五个数码管</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span> : ADDR2 = <span class="number">1</span>;ADDR1 = <span class="number">0</span>;ADDR0 = <span class="number">1</span>;i++;P0 = LedBuff[<span class="number">5</span>];<span class="keyword">break</span>;     <span class="comment">//第六次溢出点亮第六个数码管</span></span><br><span class="line">        <span class="keyword">default</span> : <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="点阵LED"><a href="#点阵LED" class="headerlink" title="点阵LED"></a>点阵LED</h3><h4 id="点阵LED静态显示"><a href="#点阵LED静态显示" class="headerlink" title="点阵LED静态显示"></a>点阵LED静态显示</h4><p>&emsp;&emsp;点阵LED本质也是LED，其结构图如图所示，左侧8个数字引脚是接的内部LED的阳极，上侧的8个引脚接的是内部LED的阴极，然后他们组成了阵列，所以要点亮它们就和点亮普通LED小灯一样，比如要点亮第1行第A列的LED就把9号引脚置高电平，13号引脚置低电平就能把这颗LED点亮。</p>
<p><img src="%E7%82%B9%E9%98%B5LED%E5%8E%9F%E7%90%86%E5%9B%BE.png" alt="点阵LED原理图"></p>
<p><img src="%E7%82%B9%E9%98%B5LED%E7%94%B5%E8%B7%AF%E5%9B%BE.png" alt="点阵LED电路图"></p>
<p>&emsp;&emsp;如电路图所示，控制点阵LED的左侧引脚为U4的74HC138控制，即ADDR0-2控制，控制点阵LED的上侧引脚为单片机P0控制。注意U4的74HC138，ENLED控制E2，ADDR3控制E1，E3直接连了5V不需要控制了（这里和U3的不一样）。所以启动U4的74HC138需要ENLED=0，ADDR3=0。所以，U3和U4是没有办法同时启动的。点亮点阵的第1行第A列的LED的程序为。</p>
<p><img src="74HC138%E7%94%B5%E8%B7%AF%E5%9B%BE.png" alt="74HC138电路图"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;reg52.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">sbit LED = P0^<span class="number">0</span>;</span><br><span class="line">sbit ADDR0 = P1^<span class="number">0</span>;</span><br><span class="line">sbit ADDR1 = P1^<span class="number">1</span>;</span><br><span class="line">sbit ADDR2 = P1^<span class="number">2</span>;</span><br><span class="line">sbit ADDR3 = P1^<span class="number">3</span>;</span><br><span class="line">sbit ENLED = P1^<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    ENLED = <span class="number">0</span>;  <span class="comment">//使能U4的74HC138</span></span><br><span class="line">    ADDR3 = <span class="number">0</span>;</span><br><span class="line">    ADDR2 = <span class="number">0</span>;  <span class="comment">//经过三八译码器使能Q10</span></span><br><span class="line">    ADDR1 = <span class="number">0</span>;</span><br><span class="line">    ADDR0 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    LED = <span class="number">0</span>;    <span class="comment">//点亮点阵左上角的小灯</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;点亮点阵第一行LED的程序就如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;reg52.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">sbit ADDR0 = P1^<span class="number">0</span>;</span><br><span class="line">sbit ADDR1 = P1^<span class="number">1</span>;</span><br><span class="line">sbit ADDR2 = P1^<span class="number">2</span>;</span><br><span class="line">sbit ADDR3 = P1^<span class="number">3</span>;</span><br><span class="line">sbit ENLED = P1^<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    ENLED = <span class="number">0</span>;  <span class="comment">//使能U4的74HC138</span></span><br><span class="line">    ADDR3 = <span class="number">0</span>;</span><br><span class="line">    ADDR2 = <span class="number">0</span>;  <span class="comment">//经过三八译码器使能Q10</span></span><br><span class="line">    ADDR1 = <span class="number">0</span>;</span><br><span class="line">    ADDR0 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    P0 = <span class="number">0x00</span>;    <span class="comment">//点亮点阵第一行</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;和数码管一样点亮点阵的所有LED需要用到动态刷新，使用定时器每1ms轮流使Q10，Q11，Q12，Q13，Q18，Q19，Q20，Q21导通，这样就能看上去点亮所有LED了。程序如下。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;reg52.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">sbit ADDR0 = P1^<span class="number">0</span>;</span><br><span class="line">sbit ADDR1 = P1^<span class="number">1</span>;</span><br><span class="line">sbit ADDR2 = P1^<span class="number">2</span>;</span><br><span class="line">sbit ADDR3 = P1^<span class="number">3</span>;</span><br><span class="line">sbit ENLED = P1^<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//执行语句</span></span><br><span class="line">    <span class="comment">//LED部分</span></span><br><span class="line">    ENLED = <span class="number">0</span>;  <span class="comment">//使能U4的74HC138</span></span><br><span class="line">    ADDR3 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//中断部分</span></span><br><span class="line">    EA = <span class="number">1</span>;     <span class="comment">//使能总中断</span></span><br><span class="line">    ET0 = <span class="number">1</span>;    <span class="comment">//使能定时器0中断</span></span><br><span class="line">    <span class="comment">//定时器部分</span></span><br><span class="line">    TMOD = <span class="number">0x01</span>;    <span class="comment">//设置T0为模式1</span></span><br><span class="line">    TH0 = <span class="number">0xFC</span>;     <span class="comment">//T0初值赋0xFC67，定时1ms</span></span><br><span class="line">    TL0 = <span class="number">0x67</span>;</span><br><span class="line">    TR0 = <span class="number">1</span>;       <span class="comment">//启动定时器T0</span></span><br><span class="line">    <span class="comment">//循环体</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中断函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InterruptTimer0</span><span class="params">()</span> interrupt 1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> i = <span class="number">0</span>; <span class="comment">//动态扫描索引</span></span><br><span class="line"></span><br><span class="line">    TH0 = <span class="number">0xFC</span>; <span class="comment">//重新加载初值</span></span><br><span class="line">    TL0 = <span class="number">0x67</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以下为动态刷新</span></span><br><span class="line">    P0 = <span class="number">0xFF</span>;  <span class="comment">//消隐</span></span><br><span class="line">    <span class="keyword">switch</span>(i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span> :ADDR2 = <span class="number">0</span>;ADDR1 = <span class="number">0</span>;ADDR0 = <span class="number">0</span>;i++;P0 = <span class="number">0x00</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span> :ADDR2 = <span class="number">0</span>;ADDR1 = <span class="number">0</span>;ADDR0 = <span class="number">1</span>;i++;P0 = <span class="number">0x00</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span> :ADDR2 = <span class="number">0</span>;ADDR1 = <span class="number">1</span>;ADDR0 = <span class="number">0</span>;i++;P0 = <span class="number">0x00</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span> :ADDR2 = <span class="number">0</span>;ADDR1 = <span class="number">1</span>;ADDR0 = <span class="number">1</span>;i++;P0 = <span class="number">0x00</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span> :ADDR2 = <span class="number">1</span>;ADDR1 = <span class="number">0</span>;ADDR0 = <span class="number">0</span>;i++;P0 = <span class="number">0x00</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span> :ADDR2 = <span class="number">1</span>;ADDR1 = <span class="number">0</span>;ADDR0 = <span class="number">1</span>;i++;P0 = <span class="number">0x00</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span> :ADDR2 = <span class="number">1</span>;ADDR1 = <span class="number">1</span>;ADDR0 = <span class="number">0</span>;i++;P0 = <span class="number">0x00</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span> :ADDR2 = <span class="number">1</span>;ADDR1 = <span class="number">1</span>;ADDR0 = <span class="number">1</span>;i = <span class="number">0</span>;P0 = <span class="number">0x00</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span> :<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;可以利用点阵LED显示图案，使用取模软件，将要点亮的LED的对应的赋值就能直接得出，比如要点亮形成一个爱心。程序如下。</p>
<p><img src="%E5%8F%96%E6%A8%A1%E7%88%B1%E5%BF%83.png" alt="取模爱心"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;reg52.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">sbit ADDR0 = P1^<span class="number">0</span>;</span><br><span class="line">sbit ADDR1 = P1^<span class="number">1</span>;</span><br><span class="line">sbit ADDR2 = P1^<span class="number">2</span>;</span><br><span class="line">sbit ADDR3 = P1^<span class="number">3</span>;</span><br><span class="line">sbit ENLED = P1^<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> code image[] = &#123;  <span class="comment">//图片的字模表</span></span><br><span class="line">    <span class="number">0xFF</span>, <span class="number">0x99</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x81</span>, <span class="number">0xC3</span>, <span class="number">0xE7</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//执行语句</span></span><br><span class="line">    <span class="comment">//LED部分</span></span><br><span class="line">    ENLED = <span class="number">0</span>;  <span class="comment">//使能U4的74HC138</span></span><br><span class="line">    ADDR3 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//中断部分</span></span><br><span class="line">    EA = <span class="number">1</span>;     <span class="comment">//使能总中断</span></span><br><span class="line">    ET0 = <span class="number">1</span>;    <span class="comment">//使能定时器0中断</span></span><br><span class="line">    <span class="comment">//定时器部分</span></span><br><span class="line">    TMOD = <span class="number">0x01</span>;    <span class="comment">//设置T0为模式1</span></span><br><span class="line">    TH0 = <span class="number">0xFC</span>;     <span class="comment">//T0初值赋0xFC67，定时1ms</span></span><br><span class="line">    TL0 = <span class="number">0x67</span>;</span><br><span class="line">    TR0 = <span class="number">1</span>;       <span class="comment">//启动定时器T0</span></span><br><span class="line">    <span class="comment">//循环体</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中断函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InterruptTimer0</span><span class="params">()</span> interrupt 1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> i = <span class="number">0</span>; <span class="comment">//动态扫描索引</span></span><br><span class="line"></span><br><span class="line">    TH0 = <span class="number">0xFC</span>; <span class="comment">//重新加载初值</span></span><br><span class="line">    TL0 = <span class="number">0x67</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以下为动态刷新</span></span><br><span class="line">    P0 = <span class="number">0xFF</span>;  <span class="comment">//消隐</span></span><br><span class="line">    <span class="keyword">switch</span>(i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span> :ADDR2 = <span class="number">0</span>;ADDR1 = <span class="number">0</span>;ADDR0 = <span class="number">0</span>;i++;P0 = image[<span class="number">0</span>];<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span> :ADDR2 = <span class="number">0</span>;ADDR1 = <span class="number">0</span>;ADDR0 = <span class="number">1</span>;i++;P0 = image[<span class="number">1</span>];<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span> :ADDR2 = <span class="number">0</span>;ADDR1 = <span class="number">1</span>;ADDR0 = <span class="number">0</span>;i++;P0 = image[<span class="number">2</span>];<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span> :ADDR2 = <span class="number">0</span>;ADDR1 = <span class="number">1</span>;ADDR0 = <span class="number">1</span>;i++;P0 = image[<span class="number">3</span>];<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span> :ADDR2 = <span class="number">1</span>;ADDR1 = <span class="number">0</span>;ADDR0 = <span class="number">0</span>;i++;P0 = image[<span class="number">4</span>];<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span> :ADDR2 = <span class="number">1</span>;ADDR1 = <span class="number">0</span>;ADDR0 = <span class="number">1</span>;i++;P0 = image[<span class="number">5</span>];<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span> :ADDR2 = <span class="number">1</span>;ADDR1 = <span class="number">1</span>;ADDR0 = <span class="number">0</span>;i++;P0 = image[<span class="number">6</span>];<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span> :ADDR2 = <span class="number">1</span>;ADDR1 = <span class="number">1</span>;ADDR0 = <span class="number">1</span>;i = <span class="number">0</span>;P0 = image[<span class="number">7</span>];<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span> :<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="点阵LED纵向移动"><a href="#点阵LED纵向移动" class="headerlink" title="点阵LED纵向移动"></a>点阵LED纵向移动</h4><p>&emsp;&emsp;因为电路图的设计，可以看出，三八译码器控制的三极管连接着点阵LED的左侧引脚，所以这个电路设计就定死了刷新的方向，即这个电路设计的点阵LED刷新是一行一行刷新的，这就决定了这个点阵LED是纵向移动的程序比较简洁，横向移动就需要用到二维数组了。</p>
<p>&emsp;&emsp;基于该电路图的点阵LED纵向移动，读取LED显示为第一幅图为数组的0到7，第二幅图为数组的1-8……所以可以用一维数组顺序读取下去。程序如下。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;reg52.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">sbit ADDR0 = P1^<span class="number">0</span>;</span><br><span class="line">sbit ADDR1 = P1^<span class="number">1</span>;</span><br><span class="line">sbit ADDR2 = P1^<span class="number">2</span>;</span><br><span class="line">sbit ADDR3 = P1^<span class="number">3</span>;</span><br><span class="line">sbit ENLED = P1^<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> code image[] = &#123;  <span class="comment">//图片的字模表</span></span><br><span class="line">    <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>,</span><br><span class="line">    <span class="number">0x7D</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x7D</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xE3</span>, <span class="number">0xC1</span>,</span><br><span class="line">    <span class="number">0x81</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x81</span>, <span class="number">0xC1</span>, <span class="number">0xE3</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>,</span><br><span class="line">    <span class="number">0x81</span>, <span class="number">0x01</span>, <span class="number">0x3F</span>, <span class="number">0x3F</span>, <span class="number">0x3F</span>, <span class="number">0x01</span>, <span class="number">0x81</span>, <span class="number">0xFF</span>,</span><br><span class="line">    <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//执行语句</span></span><br><span class="line">    <span class="comment">//LED部分</span></span><br><span class="line">    ENLED = <span class="number">0</span>;  <span class="comment">//使能U4的74HC138</span></span><br><span class="line">    ADDR3 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//中断部分</span></span><br><span class="line">    EA = <span class="number">1</span>;     <span class="comment">//使能总中断</span></span><br><span class="line">    ET0 = <span class="number">1</span>;    <span class="comment">//使能定时器0中断</span></span><br><span class="line">    <span class="comment">//定时器部分</span></span><br><span class="line">    TMOD = <span class="number">0x01</span>;    <span class="comment">//设置T0为模式1</span></span><br><span class="line">    TH0 = <span class="number">0xFC</span>;     <span class="comment">//T0初值赋0xFC67，定时1ms</span></span><br><span class="line">    TL0 = <span class="number">0x67</span>;</span><br><span class="line">    TR0 = <span class="number">1</span>;       <span class="comment">//启动定时器T0</span></span><br><span class="line">    <span class="comment">//循环体</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中断函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InterruptTimer0</span><span class="params">()</span> interrupt 1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> i = <span class="number">0</span>; <span class="comment">//动态扫描索引</span></span><br><span class="line">    <span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> tmr = <span class="number">0</span>;   <span class="comment">//用于累加后延时250ms</span></span><br><span class="line">    <span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> index = <span class="number">0</span>; <span class="comment">//用于图片刷新</span></span><br><span class="line"></span><br><span class="line">    TH0 = <span class="number">0xFC</span>; <span class="comment">//重新加载初值</span></span><br><span class="line">    TL0 = <span class="number">0x67</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以下为动态刷新</span></span><br><span class="line">    P0 = <span class="number">0xFF</span>;  <span class="comment">//消隐</span></span><br><span class="line">    <span class="keyword">switch</span>(i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span> :ADDR2 = <span class="number">0</span>;ADDR1 = <span class="number">0</span>;ADDR0 = <span class="number">0</span>;i++;P0 = image[index];<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span> :ADDR2 = <span class="number">0</span>;ADDR1 = <span class="number">0</span>;ADDR0 = <span class="number">1</span>;i++;P0 = image[index + <span class="number">1</span>];<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span> :ADDR2 = <span class="number">0</span>;ADDR1 = <span class="number">1</span>;ADDR0 = <span class="number">0</span>;i++;P0 = image[index + <span class="number">2</span>];<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span> :ADDR2 = <span class="number">0</span>;ADDR1 = <span class="number">1</span>;ADDR0 = <span class="number">1</span>;i++;P0 = image[index + <span class="number">3</span>];<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span> :ADDR2 = <span class="number">1</span>;ADDR1 = <span class="number">0</span>;ADDR0 = <span class="number">0</span>;i++;P0 = image[index + <span class="number">4</span>];<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span> :ADDR2 = <span class="number">1</span>;ADDR1 = <span class="number">0</span>;ADDR0 = <span class="number">1</span>;i++;P0 = image[index + <span class="number">5</span>];<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span> :ADDR2 = <span class="number">1</span>;ADDR1 = <span class="number">1</span>;ADDR0 = <span class="number">0</span>;i++;P0 = image[index + <span class="number">6</span>];<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span> :ADDR2 = <span class="number">1</span>;ADDR1 = <span class="number">1</span>;ADDR0 = <span class="number">1</span>;i = <span class="number">0</span>;P0 = image[index + <span class="number">7</span>];<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span> :<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定时器250ms用来切换图片</span></span><br><span class="line">    tmr++;</span><br><span class="line">    <span class="keyword">if</span>(tmr &gt;= <span class="number">250</span>)  <span class="comment">//达到250ms切换图片</span></span><br><span class="line">    &#123;</span><br><span class="line">        tmr = <span class="number">0</span>;</span><br><span class="line">        index++;    <span class="comment">//每250ms切换下一张图片</span></span><br><span class="line">        <span class="keyword">if</span>(index &gt;= <span class="number">32</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="点阵LED横向移动"><a href="#点阵LED横向移动" class="headerlink" title="点阵LED横向移动"></a>点阵LED横向移动</h4><p>&emsp;&emsp;由于这个电路图不是为横向移动设计的，所以不能像纵向移动一样进行一维数组的连续读取，需要用到二维数组，每次读取下一行数组。程序如下。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;reg52.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">sbit ADDR0 = P1^<span class="number">0</span>;</span><br><span class="line">sbit ADDR1 = P1^<span class="number">1</span>;</span><br><span class="line">sbit ADDR2 = P1^<span class="number">2</span>;</span><br><span class="line">sbit ADDR3 = P1^<span class="number">3</span>;</span><br><span class="line">sbit ENLED = P1^<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> code image[<span class="number">30</span>][<span class="number">8</span>] = &#123;</span><br><span class="line">    &#123;<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>&#125;,  <span class="comment">//动画帧1</span></span><br><span class="line">    &#123;<span class="number">0xFF</span>,<span class="number">0x7F</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0xFF</span>,<span class="number">0x7F</span>&#125;,  <span class="comment">//动画帧2</span></span><br><span class="line">    &#123;<span class="number">0xFF</span>,<span class="number">0x3F</span>,<span class="number">0x7F</span>,<span class="number">0x7F</span>,<span class="number">0x7F</span>,<span class="number">0x7F</span>,<span class="number">0x7F</span>,<span class="number">0x3F</span>&#125;,  <span class="comment">//动画帧3</span></span><br><span class="line">    &#123;<span class="number">0xFF</span>,<span class="number">0x1F</span>,<span class="number">0x3F</span>,<span class="number">0x3F</span>,<span class="number">0x3F</span>,<span class="number">0x3F</span>,<span class="number">0x3F</span>,<span class="number">0x1F</span>&#125;,  <span class="comment">//动画帧4</span></span><br><span class="line">    &#123;<span class="number">0xFF</span>,<span class="number">0x0F</span>,<span class="number">0x9F</span>,<span class="number">0x9F</span>,<span class="number">0x9F</span>,<span class="number">0x9F</span>,<span class="number">0x9F</span>,<span class="number">0x0F</span>&#125;,  <span class="comment">//动画帧5</span></span><br><span class="line">    &#123;<span class="number">0xFF</span>,<span class="number">0x87</span>,<span class="number">0xCF</span>,<span class="number">0xCF</span>,<span class="number">0xCF</span>,<span class="number">0xCF</span>,<span class="number">0xCF</span>,<span class="number">0x87</span>&#125;,  <span class="comment">//动画帧6</span></span><br><span class="line">    &#123;<span class="number">0xFF</span>,<span class="number">0xC3</span>,<span class="number">0xE7</span>,<span class="number">0xE7</span>,<span class="number">0xE7</span>,<span class="number">0xE7</span>,<span class="number">0xE7</span>,<span class="number">0xC3</span>&#125;,  <span class="comment">//动画帧7</span></span><br><span class="line">    &#123;<span class="number">0xFF</span>,<span class="number">0xE1</span>,<span class="number">0x73</span>,<span class="number">0x73</span>,<span class="number">0x73</span>,<span class="number">0xF3</span>,<span class="number">0xF3</span>,<span class="number">0xE1</span>&#125;,  <span class="comment">//动画帧8</span></span><br><span class="line">    &#123;<span class="number">0xFF</span>,<span class="number">0x70</span>,<span class="number">0x39</span>,<span class="number">0x39</span>,<span class="number">0x39</span>,<span class="number">0x79</span>,<span class="number">0xF9</span>,<span class="number">0xF0</span>&#125;,  <span class="comment">//动画帧9</span></span><br><span class="line">    &#123;<span class="number">0xFF</span>,<span class="number">0x38</span>,<span class="number">0x1C</span>,<span class="number">0x1C</span>,<span class="number">0x1C</span>,<span class="number">0x3C</span>,<span class="number">0x7C</span>,<span class="number">0xF8</span>&#125;,  <span class="comment">//动画帧10</span></span><br><span class="line">    &#123;<span class="number">0xFF</span>,<span class="number">0x9C</span>,<span class="number">0x0E</span>,<span class="number">0x0E</span>,<span class="number">0x0E</span>,<span class="number">0x1E</span>,<span class="number">0x3E</span>,<span class="number">0x7C</span>&#125;,  <span class="comment">//动画帧11</span></span><br><span class="line">    &#123;<span class="number">0xFF</span>,<span class="number">0xCE</span>,<span class="number">0x07</span>,<span class="number">0x07</span>,<span class="number">0x07</span>,<span class="number">0x0F</span>,<span class="number">0x1F</span>,<span class="number">0x3E</span>&#125;,  <span class="comment">//动画帧12</span></span><br><span class="line">    &#123;<span class="number">0xFF</span>,<span class="number">0x67</span>,<span class="number">0x03</span>,<span class="number">0x03</span>,<span class="number">0x03</span>,<span class="number">0x07</span>,<span class="number">0x0F</span>,<span class="number">0x9F</span>&#125;,  <span class="comment">//动画帧13</span></span><br><span class="line">    &#123;<span class="number">0xFF</span>,<span class="number">0x33</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x01</span>,<span class="number">0x03</span>,<span class="number">0x87</span>,<span class="number">0xCF</span>&#125;,  <span class="comment">//动画帧14</span></span><br><span class="line">    &#123;<span class="number">0xFF</span>,<span class="number">0x99</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x81</span>,<span class="number">0xC3</span>,<span class="number">0xE7</span>&#125;,  <span class="comment">//动画帧15</span></span><br><span class="line">    &#123;<span class="number">0xFF</span>,<span class="number">0xCC</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0x80</span>,<span class="number">0xC0</span>,<span class="number">0xE1</span>,<span class="number">0xF3</span>&#125;,  <span class="comment">//动画帧16</span></span><br><span class="line">    &#123;<span class="number">0xFF</span>,<span class="number">0xE6</span>,<span class="number">0xC0</span>,<span class="number">0xC0</span>,<span class="number">0xC0</span>,<span class="number">0xE0</span>,<span class="number">0xF0</span>,<span class="number">0xF9</span>&#125;,  <span class="comment">//动画帧17</span></span><br><span class="line">    &#123;<span class="number">0xFF</span>,<span class="number">0x73</span>,<span class="number">0x60</span>,<span class="number">0x60</span>,<span class="number">0x60</span>,<span class="number">0x70</span>,<span class="number">0x78</span>,<span class="number">0xFC</span>&#125;,  <span class="comment">//动画帧18</span></span><br><span class="line">    &#123;<span class="number">0xFF</span>,<span class="number">0x39</span>,<span class="number">0x30</span>,<span class="number">0x30</span>,<span class="number">0x30</span>,<span class="number">0x38</span>,<span class="number">0x3C</span>,<span class="number">0x7E</span>&#125;,  <span class="comment">//动画帧19</span></span><br><span class="line">    &#123;<span class="number">0xFF</span>,<span class="number">0x9C</span>,<span class="number">0x98</span>,<span class="number">0x98</span>,<span class="number">0x98</span>,<span class="number">0x9C</span>,<span class="number">0x1E</span>,<span class="number">0x3F</span>&#125;,  <span class="comment">//动画帧20</span></span><br><span class="line">    &#123;<span class="number">0xFF</span>,<span class="number">0xCE</span>,<span class="number">0xCC</span>,<span class="number">0xCC</span>,<span class="number">0xCC</span>,<span class="number">0xCE</span>,<span class="number">0x0F</span>,<span class="number">0x1F</span>&#125;,  <span class="comment">//动画帧21</span></span><br><span class="line">    &#123;<span class="number">0xFF</span>,<span class="number">0x67</span>,<span class="number">0x66</span>,<span class="number">0x66</span>,<span class="number">0x66</span>,<span class="number">0x67</span>,<span class="number">0x07</span>,<span class="number">0x0F</span>&#125;,  <span class="comment">//动画帧22</span></span><br><span class="line">    &#123;<span class="number">0xFF</span>,<span class="number">0x33</span>,<span class="number">0x33</span>,<span class="number">0x33</span>,<span class="number">0x33</span>,<span class="number">0x33</span>,<span class="number">0x03</span>,<span class="number">0x87</span>&#125;,  <span class="comment">//动画帧23</span></span><br><span class="line">    &#123;<span class="number">0xFF</span>,<span class="number">0x99</span>,<span class="number">0x99</span>,<span class="number">0x99</span>,<span class="number">0x99</span>,<span class="number">0x99</span>,<span class="number">0x81</span>,<span class="number">0xC3</span>&#125;,  <span class="comment">//动画帧24</span></span><br><span class="line">    &#123;<span class="number">0xFF</span>,<span class="number">0xCC</span>,<span class="number">0xCC</span>,<span class="number">0xCC</span>,<span class="number">0xCC</span>,<span class="number">0xCC</span>,<span class="number">0xC0</span>,<span class="number">0xE1</span>&#125;,  <span class="comment">//动画帧25</span></span><br><span class="line">    &#123;<span class="number">0xFF</span>,<span class="number">0xE6</span>,<span class="number">0xE6</span>,<span class="number">0xE6</span>,<span class="number">0xE6</span>,<span class="number">0xE6</span>,<span class="number">0xE0</span>,<span class="number">0xF0</span>&#125;,  <span class="comment">//动画帧26</span></span><br><span class="line">    &#123;<span class="number">0xFF</span>,<span class="number">0xF3</span>,<span class="number">0xF3</span>,<span class="number">0xF3</span>,<span class="number">0xF3</span>,<span class="number">0xF3</span>,<span class="number">0xF0</span>,<span class="number">0xF8</span>&#125;,  <span class="comment">//动画帧27</span></span><br><span class="line">    &#123;<span class="number">0xFF</span>,<span class="number">0xF9</span>,<span class="number">0xF9</span>,<span class="number">0xF9</span>,<span class="number">0xF9</span>,<span class="number">0xF9</span>,<span class="number">0xF8</span>,<span class="number">0xFC</span>&#125;,  <span class="comment">//动画帧28</span></span><br><span class="line">    &#123;<span class="number">0xFF</span>,<span class="number">0xFC</span>,<span class="number">0xFC</span>,<span class="number">0xFC</span>,<span class="number">0xFC</span>,<span class="number">0xFC</span>,<span class="number">0xFC</span>,<span class="number">0xFE</span>&#125;,  <span class="comment">//动画帧29</span></span><br><span class="line">    &#123;<span class="number">0xFF</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFE</span>,<span class="number">0xFF</span>&#125;   <span class="comment">//动画帧30</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//执行语句</span></span><br><span class="line">    <span class="comment">//LED部分</span></span><br><span class="line">    ENLED = <span class="number">0</span>;  <span class="comment">//使能U4的74HC138</span></span><br><span class="line">    ADDR3 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//中断部分</span></span><br><span class="line">    EA = <span class="number">1</span>;     <span class="comment">//使能总中断</span></span><br><span class="line">    ET0 = <span class="number">1</span>;    <span class="comment">//使能定时器0中断</span></span><br><span class="line">    <span class="comment">//定时器部分</span></span><br><span class="line">    TMOD = <span class="number">0x01</span>;    <span class="comment">//设置T0为模式1</span></span><br><span class="line">    TH0 = <span class="number">0xFC</span>;     <span class="comment">//T0初值赋0xFC67，定时1ms</span></span><br><span class="line">    TL0 = <span class="number">0x67</span>;</span><br><span class="line">    TR0 = <span class="number">1</span>;       <span class="comment">//启动定时器T0</span></span><br><span class="line">    <span class="comment">//循环体</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中断函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InterruptTimer0</span><span class="params">()</span> interrupt 1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> i = <span class="number">0</span>; <span class="comment">//动态扫描索引</span></span><br><span class="line">    <span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> tmr = <span class="number">0</span>;   <span class="comment">//用于累加后延时250ms</span></span><br><span class="line">    <span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> index = <span class="number">0</span>; <span class="comment">//用于图片刷新</span></span><br><span class="line"></span><br><span class="line">    TH0 = <span class="number">0xFC</span>; <span class="comment">//重新加载初值</span></span><br><span class="line">    TL0 = <span class="number">0x67</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以下为动态刷新</span></span><br><span class="line">    P0 = <span class="number">0xFF</span>;  <span class="comment">//消隐</span></span><br><span class="line">    <span class="keyword">switch</span>(i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span> :ADDR2 = <span class="number">0</span>;ADDR1 = <span class="number">0</span>;ADDR0 = <span class="number">0</span>;i++;P0 = image[index][<span class="number">0</span>];<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span> :ADDR2 = <span class="number">0</span>;ADDR1 = <span class="number">0</span>;ADDR0 = <span class="number">1</span>;i++;P0 = image[index][<span class="number">1</span>];<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span> :ADDR2 = <span class="number">0</span>;ADDR1 = <span class="number">1</span>;ADDR0 = <span class="number">0</span>;i++;P0 = image[index][<span class="number">2</span>];<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span> :ADDR2 = <span class="number">0</span>;ADDR1 = <span class="number">1</span>;ADDR0 = <span class="number">1</span>;i++;P0 = image[index][<span class="number">3</span>];<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span> :ADDR2 = <span class="number">1</span>;ADDR1 = <span class="number">0</span>;ADDR0 = <span class="number">0</span>;i++;P0 = image[index][<span class="number">4</span>];<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span> :ADDR2 = <span class="number">1</span>;ADDR1 = <span class="number">0</span>;ADDR0 = <span class="number">1</span>;i++;P0 = image[index][<span class="number">5</span>];<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span> :ADDR2 = <span class="number">1</span>;ADDR1 = <span class="number">1</span>;ADDR0 = <span class="number">0</span>;i++;P0 = image[index][<span class="number">6</span>];<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span> :ADDR2 = <span class="number">1</span>;ADDR1 = <span class="number">1</span>;ADDR0 = <span class="number">1</span>;i = <span class="number">0</span>;P0 = image[index][<span class="number">7</span>];<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span> :<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定时器250ms用来切换图片</span></span><br><span class="line">    tmr++;</span><br><span class="line">    <span class="keyword">if</span>(tmr &gt;= <span class="number">250</span>)  <span class="comment">//达到250ms切换图片</span></span><br><span class="line">    &#123;</span><br><span class="line">        tmr = <span class="number">0</span>;</span><br><span class="line">        index++;    <span class="comment">//每250ms切换下一张图片</span></span><br><span class="line">        <span class="keyword">if</span>(index &gt;= <span class="number">30</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.bilibili.com/video/BV1RJ411k74J">手把手教你学51单片机-视频教程</a></p>
<p><a href="http://res.kingst.site/kfs/doc/%e6%89%8b%e6%8a%8a%e6%89%8b%e6%95%99%e4%bd%a0%e5%ad%a651%e5%8d%95%e7%89%87%e6%9c%ba-C%e8%af%ad%e8%a8%80%e7%89%88.pdf">手把手教你学51单片机-电子书教材</a></p>
<p><a href="http://www.qdkingst.com/cn">KingST官网</a></p>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C51</tag>
      </tags>
  </entry>
  <entry>
    <title>利用FreeFileSync和bat实现多版本备份</title>
    <url>/2022/04/29/Bat_with_FreeFileSync/</url>
    <content><![CDATA[<p>本篇章仅为记录，我并不会bat脚本的编写。在给公司进行备份策略管理的时候翻阅资料得出的方案，仅供自己参考。</p>
<span id="more"></span>

<h2 id="策略方案"><a href="#策略方案" class="headerlink" title="策略方案"></a>策略方案</h2><p>&emsp;&emsp;由于要求就是每个礼拜进行对某一文件夹的备份，且每次都需要新建新的备份，保留之前的备份，而不是更新覆盖。比如要备份X，本周要备份到20220430下，下周要备份到20220507下，彼此数据独立。而如今很多备份软件都是只能备份到某个文件夹下，并不能自动在下周备份到另一个文件夹。所以结合FreeFileSync转换了一下思路，建立Copy文件夹，用来每周固定备份到这里，建立Copy_History文件夹，用于存放之前备份的数据。具体如下：<br>&emsp;&emsp;&emsp;0.第一次备份直接手动备份，在Copy文件夹下新建文件夹A。后续为自动备份。<br>&emsp;&emsp;&emsp;1.利用bat脚本定时在Copy_History文件夹下新建以当天日期为文件名的空文件夹。<br>&emsp;&emsp;&emsp;2.利用bat脚本定时将Copy文件夹下的文件夹A剪切到上一步所建的文件夹。<br>&emsp;&emsp;&emsp;3.利用bat脚本定时在Copy文件夹下新建文件夹A。<br>&emsp;&emsp;&emsp;4.利用FreeFileSync软件对数据进行备份至Copy下的文件夹A。<br>&emsp;&emsp;最后只要利用Window自带的任务计划程序可定时执行上面的操作。</p>
<p>&emsp;&emsp;由于实际案例备份的就是3D文件夹，所以下面就将以实际文件夹名进行显示。</p>
<h3 id="利用bat在Copy-History下新建一个空文件夹"><a href="#利用bat在Copy-History下新建一个空文件夹" class="headerlink" title="利用bat在Copy_History下新建一个空文件夹"></a>利用bat在Copy_History下新建一个空文件夹</h3><p>&emsp;&emsp;因为要存档历史版本，所以可以以备份的时间作为文件夹的命名。</p>
<p>&emsp;&emsp;以下脚本为带具体时刻的，还将时间转化为24小时。</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">::获取日期 将格式设置为：<span class="number">20220430</span></span><br><span class="line"><span class="built_in">set</span> datevar=<span class="variable">%date:~0,4%</span><span class="variable">%date:~5,2%</span><span class="variable">%date:~8,2%</span></span><br><span class="line">::获取时间中的小时 将格式设置为：<span class="number">24</span>小时制</span><br><span class="line"><span class="built_in">set</span> timevar=<span class="variable">%time:~0,2%</span></span><br><span class="line"><span class="keyword">if</span> /i <span class="variable">%timevar%</span> <span class="keyword">LSS</span> <span class="number">10</span> (<span class="built_in">set</span> timevar=<span class="number">0</span><span class="variable">%time:~1,1%</span>)</span><br><span class="line"><span class="built_in">set</span> timevar=<span class="variable">%timevar%</span><span class="variable">%time:~3,2%</span></span><br><span class="line">@<span class="built_in">echo</span> <span class="variable">%timevar%</span></span><br><span class="line"><span class="built_in">Md</span> &quot;E:\Copy_History\<span class="variable">%datevar%</span><span class="variable">%timevar%</span>&quot;</span><br><span class="line">::<span class="built_in">pause</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;以下为实际应用在策略里的脚本。</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">::获取日期 将格式设置为：<span class="number">20150410</span></span><br><span class="line"><span class="built_in">set</span> datevar=<span class="variable">%date:~0,4%</span><span class="variable">%date:~5,2%</span><span class="variable">%date:~8,2%</span></span><br><span class="line"><span class="built_in">Md</span> &quot;E:\Copy_History\<span class="variable">%datevar%</span>&quot;</span><br><span class="line">::<span class="built_in">pause</span></span><br></pre></td></tr></table></figure>

<h3 id="利用bat将Copy里的文件夹剪切到新建的文件夹"><a href="#利用bat将Copy里的文件夹剪切到新建的文件夹" class="headerlink" title="利用bat将Copy里的文件夹剪切到新建的文件夹"></a>利用bat将Copy里的文件夹剪切到新建的文件夹</h3><p>&emsp;&emsp;将Copy文件夹下的文件夹3D剪切到上一步所建的文件夹，以达到清空Copy文件夹的目的，以便之后的备份是重新备份而不是更新。</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">::获取日期 将格式设置为：<span class="number">20150410</span></span><br><span class="line"><span class="built_in">set</span> datevar=<span class="variable">%date:~0,4%</span><span class="variable">%date:~5,2%</span><span class="variable">%date:~8,2%</span></span><br><span class="line"><span class="built_in">move</span> E:\<span class="built_in">Copy</span>\<span class="number">3</span>D E:\Copy_History\<span class="variable">%datevar%</span></span><br><span class="line">::<span class="built_in">pause</span></span><br></pre></td></tr></table></figure>

<h3 id="利用bat在Copy下新建一个空文件夹"><a href="#利用bat在Copy下新建一个空文件夹" class="headerlink" title="利用bat在Copy下新建一个空文件夹"></a>利用bat在Copy下新建一个空文件夹</h3><p>&emsp;&emsp;上一步操作由于将3D从Copy里整个剪切走了，所以需要在Copy里新建一个3D文件夹以让FreeFileSync进行识别。实际不新建也没事，FreeFileSync会先报错，但可以自动忽略错误，之后FreeFileSync可以自动创建这个文件夹3D。</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">Md</span> &quot;E:\<span class="built_in">Copy</span>\<span class="number">3</span>D&quot;</span><br><span class="line">::<span class="built_in">pause</span></span><br></pre></td></tr></table></figure>

<h3 id="利用FreeFileSync对数据进行备份至Copy文件"><a href="#利用FreeFileSync对数据进行备份至Copy文件" class="headerlink" title="利用FreeFileSync对数据进行备份至Copy文件"></a>利用FreeFileSync对数据进行备份至Copy文件</h3><p>&emsp;&emsp;先看一下FreeFileSync的界面。</p>
<p><img src="FreeFileSync.png" alt="FreeFileSync"></p>
<p>&emsp;&emsp;FreeFileSync的比较后的画面</p>
<p><img src="FreeFileSync%E6%AF%94%E8%BE%83%E5%90%8E.png" alt="FreeFileSync比较后"></p>
<p>&emsp;&emsp;首先配置比较设定和同步设定，比较设定我选择的是比较文件内容，不过因为往空的文件夹里备份，所以无所谓选择哪一个。同步设定我选择的是镜像，这样就是单向从源备份到目标。目标的更改不会影响到源。在删除文件里我设置了个历史版本，并新建了一个Copy_back的文件夹，意图是在出问题第二个脚本没有执行的时候，将Copy里的3D进行了覆盖，被覆盖文件会被存在Copy_back这里。算是有另一道保障。</p>
<p><img src="FreeFileSync%E8%AE%BE%E5%AE%9A%E6%AF%94%E8%BE%83.png" alt="FreeFileSync设定比较"></p>
<p><img src="FreeFileSync%E8%AE%BE%E5%AE%9A%E5%90%8C%E6%AD%A5.png" alt="FreeFileSync设定同步"></p>
<p>&emsp;&emsp;然后是源文件和目标文件的地址选定。</p>
<p><img src="FreeFileSync%E6%BA%90%E5%92%8C%E7%9B%AE%E6%A0%87.png" alt="FreeFileSync源和目标"></p>
<p>&emsp;&emsp;最后是配置的保存和另存为脚本。</p>
<p><img src="FreeFileSync%E4%BF%9D%E5%AD%98%E9%85%8D%E7%BD%AE%E5%92%8C%E5%8F%A6%E5%AD%98%E4%B8%BA%E8%84%9A%E6%9C%AC.png" alt="FreeFileSync保存配置和另存为脚本"></p>
<p><img src="FreeFileSync%E8%84%9A%E6%9C%AC%E4%BF%9D%E5%AD%98.png" alt="FreeFileSync脚本保存"></p>
<h3 id="利用Window自带的任务计划程序定时执行上述操作"><a href="#利用Window自带的任务计划程序定时执行上述操作" class="headerlink" title="利用Window自带的任务计划程序定时执行上述操作"></a>利用Window自带的任务计划程序定时执行上述操作</h3><p>&emsp;&emsp;在此电脑的管理里进入，选择任务计划程序库，新建新的基本任务。</p>
<p><img src="%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%E7%A8%8B%E5%BA%8F.png" alt="任务计划程序"></p>
<p>&emsp;&emsp;命名任务计划程序的名称。</p>
<p><img src="%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%E7%A8%8B%E5%BA%8F%E7%AC%AC1%E6%AD%A5.png" alt="任务计划程序第1步"></p>
<p>&emsp;&emsp;选择启动任务的间隔。我选择的是周六当天进行备份。</p>
<p><img src="%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%E7%A8%8B%E5%BA%8F%E7%AC%AC2%E6%AD%A5.png" alt="任务计划程序第2步"></p>
<p>&emsp;&emsp;选择启动任务的时间。我选择的是第一个创建日期的文件夹的脚本为周六0点启动，剪切操作脚本为周六1点启动，创建3D文件夹的脚本为周六2点启动，备份脚本为周六6点启动。</p>
<p><img src="%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%E7%A8%8B%E5%BA%8F%E7%AC%AC3%E6%AD%A5.png" alt="任务计划程序第3步"></p>
<p>&emsp;&emsp;选择启动程序。</p>
<p><img src="%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%E7%A8%8B%E5%BA%8F%E7%AC%AC4%E6%AD%A5.png" alt="任务计划程序第4步"></p>
<p>&emsp;&emsp;选择想要启动的脚本。</p>
<p><img src="%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%E7%A8%8B%E5%BA%8F%E7%AC%AC5%E6%AD%A5.png" alt="任务计划程序第5步"></p>
<p>&emsp;&emsp;完成后右击属性，变更权限。默认的为需要用户登录才能启动脚本，把它变更为不需要登陆就启动，且以最高权限运行。这样就只需要开机，不需要登陆到window就能进行备份。</p>
<p><img src="%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%E7%A8%8B%E5%BA%8F%E5%85%B6%E4%BB%96%E5%B1%9E%E6%80%A7.png" alt="任务计划程序其他属性"></p>
<p>&emsp;&emsp;完成任务计划程序设定。</p>
<p><img src="%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%E7%A8%8B%E5%BA%8F%E8%AE%BE%E5%AE%9A%E5%AE%8C%E6%AF%95.png" alt="任务计划程序设定完毕"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/Fabuler/article/details/44974777">在当前文件夹下创建以日期和时间命名的文件夹</a></p>
<p><a href="https://post.smzdm.com/p/a27gxw62/">硬核教程：如何使用【FreeFileSync】实现电脑文件自动备份功能</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/266883367">好用的自动同步软件：FreeFileSync</a></p>
<p><a href="https://www.zhihu.com/question/408704375">如何让电脑每日自动生成文件夹，并以当日日期为文件名字？</a></p>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>bat</tag>
      </tags>
  </entry>
  <entry>
    <title>KingST开发板C51单片机学习笔记-Cheaper 6</title>
    <url>/2022/04/27/Study-KingST51-Cheaper6/</url>
    <content><![CDATA[<p>本篇为KingST的C51单片机的学习笔记，Cheaper 6为讲解条件语句，动态显示数码管和中断。</p>
<span id="more"></span>

<h2 id="Chapter-6-中断与数码管动态显示"><a href="#Chapter-6-中断与数码管动态显示" class="headerlink" title="Chapter 6 中断与数码管动态显示"></a>Chapter 6 中断与数码管动态显示</h2><h3 id="C语言基础2"><a href="#C语言基础2" class="headerlink" title="C语言基础2"></a>C语言基础2</h3><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>&emsp;&emsp;<strong>数组是具有相同数据类型的有序数据的组合。</strong>一般来讲要满足以下三个条件：<br>&emsp;&emsp;&emsp;1.具有相同的数据类型。<br>&emsp;&emsp;&emsp;2.具有相同的名字。<br>&emsp;&emsp;&emsp;3.在存储器中是被连续存放的。</p>
<p>&emsp;&emsp;数组的声明：<br>&emsp;&emsp;&emsp;数据类型 数组名[数组长度];<br>&emsp;&emsp;&emsp;1.数组的数据类型声明是该数组的每个元素的类型。<br>&emsp;&emsp;&emsp;2.数组名的声明要符合C语言的标识符的声明要求，只能由字母、数字、下划线。<br>&emsp;&emsp;&emsp;3.方括号中的数组长度是一个常量或常量表达式，并且必须是正整数。</p>
<p>&emsp;&emsp;数组的初始化：<br>&emsp;&emsp;&emsp;数据类型 数组名[数组长度] = {初值列表};<br>&emsp;&emsp;&emsp;1.初值列表里的数据之间要用逗号隔开。<br>&emsp;&emsp;&emsp;2.初值列表里的初值的数量必须小于或等于数组长度，当小于数组长度，数组的后边没有赋值的话就自动赋值为0。<br>&emsp;&emsp;&emsp;3.数组长度可以省略。初始化列表由几个元素，数组就有多长。<br>&emsp;&emsp;&emsp;4.系统为数组分配连续的存储单元的时候，数组元素的相对次序由下标来决定。  </p>
<p>&emsp;&emsp;数组的使用：<br>&emsp;&emsp;&emsp;1.引用数组的时候，方括号里的数字代表数组元素的下标，而在初始化的时候代表元素的个数。<br>&emsp;&emsp;&emsp;2.数组元素的方括号里可以是整型常数，整型变量或者表达式，而数组初始化的时候必须是常量不能是变量。<br>&emsp;&emsp;&emsp;3.数组整体赋值只能在初始化的时候进行，程序执行代码中只能对单个元素赋值。<br>&emsp;&emsp;&emsp;4.加了code关键字的数组为只读，没加的数组可读可写。</p>
<h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><p>&emsp;&emsp;if为条件判断语句，一共有三种格式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)</span><br><span class="line">&#123;</span><br><span class="line">    语句<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)</span><br><span class="line">&#123;</span><br><span class="line">    语句<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    语句<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件语句<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    语句<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(条件语句<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">    语句<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    语句<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;在第三种形式中，有一个条件表达式满足条件就会跳出整个判断。</p>
<h4 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h4><p>&emsp;&emsp;switch也为条件判断语句，格式如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量表达式<span class="number">1</span> : 语句<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量表达式<span class="number">2</span> : 语句<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量表达式n : 语句n;</span><br><span class="line">    <span class="keyword">default</span> : 语句n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;这种格式有一个明显的缺点，即使有一个条件表达式满足目标，它也不会跳出，会继续进行条件判断。所以需要使用break关键字。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量表达式<span class="number">1</span> : 语句<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量表达式<span class="number">2</span> : 语句<span class="number">2</span>;<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量表达式n : 语句n;<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span> : 语句n+<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数码管的动态显示"><a href="#数码管的动态显示" class="headerlink" title="数码管的动态显示"></a>数码管的动态显示</h3><h4 id="动态显示的基本原理"><a href="#动态显示的基本原理" class="headerlink" title="动态显示的基本原理"></a>动态显示的基本原理</h4><p>&emsp;&emsp;由数码管的电路图可以看出，由于51单片机资源不够，所以一次只能点亮一个数码管，点亮多个数码管其实是轮流点亮的，利用人眼的视觉暂留现象（也叫余晖效应），可以做到看起来所有数码管同时亮起，这个就是动态显示，也叫动态扫描。</p>
<p><img src="%E6%95%B0%E7%A0%81%E7%AE%A1%E7%94%B5%E8%B7%AF.png" alt="数码管电路"></p>
<p>&emsp;&emsp;<strong>关于动态显示的刷新时间，一般刷新率大于100Hz即刷新时间小于10ms</strong>，那么就可以看起来是无闪烁的了。开发板有6个数码管，每个数码管点亮1ms，刷新一轮需要6ms，比较接近10ms，所以定时器就初始为1ms的定时器。<br>&emsp;&emsp;那么要做一个秒表的程序的主程序要做的事情就清楚了，分别为：每1ms点亮一个数码管，依次点亮。每1s显示的数字加1。</p>
<p>&emsp;&emsp;使用if语句的方式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">include&lt;reg52.h&gt;</span><br><span class="line"></span><br><span class="line">sbit ADDR0 = P1^<span class="number">0</span>;</span><br><span class="line">sbit ADDR1 = P1^<span class="number">1</span>;</span><br><span class="line">sbit ADDR2 = P1^<span class="number">2</span>;</span><br><span class="line">sbit ADDR3 = P1^<span class="number">3</span>;</span><br><span class="line">sbit ENLED = P1^<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用数组来存储数码管的真值表</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> code LedChar[] = &#123;</span><br><span class="line">    <span class="number">0xC0</span>, <span class="number">0xF9</span>, <span class="number">0xA4</span>, <span class="number">0xB0</span>, <span class="number">0x99</span>, <span class="number">0x92</span>, <span class="number">0x82</span>, <span class="number">0xF8</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x90</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//数码管显示缓冲区，初值0xFF确保启动是所有数码管都不亮</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> LedBuff[<span class="number">6</span>] = &#123;</span><br><span class="line">    <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//声明局部变量语句</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> cnt = <span class="number">0</span>;   <span class="comment">//记录T0溢出次数</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i = <span class="number">0</span>;    <span class="comment">//动态扫描的索引，即数码管的脚标</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> sec = <span class="number">0</span>;  <span class="comment">//记录经过的秒数</span></span><br><span class="line">    <span class="comment">//执行语句</span></span><br><span class="line">    <span class="comment">//LED部分</span></span><br><span class="line">    ENLED = <span class="number">0</span>;  <span class="comment">//使能U3的74HC138</span></span><br><span class="line">    ADDR3 = <span class="number">1</span>;  <span class="comment">//因为需要动态改变ADDR0-2的值，所有不用再初始化了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定时器部分</span></span><br><span class="line">    TMOD = <span class="number">0x01</span>;    <span class="comment">//设定定时器T0为模式1</span></span><br><span class="line">    TH0 = <span class="number">0xFC</span>;     <span class="comment">//T0赋值0xFC67，定时为1ms</span></span><br><span class="line">    TL0 = <span class="number">0x67</span>;</span><br><span class="line">    TR0 = <span class="number">1</span>;    <span class="comment">//启动T0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(TF0 == <span class="number">1</span>)    <span class="comment">//判断定时器T0是否溢出，即为已计时1ms</span></span><br><span class="line">        &#123;</span><br><span class="line">            TF0 = <span class="number">0</span>;    <span class="comment">//定时器T0溢出后，清除中断标志</span></span><br><span class="line">            TH0 = <span class="number">0xFC</span>; <span class="comment">//定时器T0溢出后，重新赋值</span></span><br><span class="line">            TL0 = <span class="number">0x67</span>;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">if</span>(cnt &gt;= <span class="number">1000</span> )    <span class="comment">//达到1s</span></span><br><span class="line">            &#123;</span><br><span class="line">                cnt = <span class="number">0</span>;    <span class="comment">//达到1s后计数清零</span></span><br><span class="line">                sec++;      <span class="comment">//经过一秒秒计数加1</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//以下代码将sec按十进制从低位到高位依次存到显示缓冲区中</span></span><br><span class="line">                LedBuff[<span class="number">0</span>] = LedChar[sec % <span class="number">10</span>];</span><br><span class="line">                LedBuff[<span class="number">1</span>] = LedChar[sec / <span class="number">10</span> % <span class="number">10</span>];</span><br><span class="line">                LedBuff[<span class="number">2</span>] = LedChar[sec / <span class="number">100</span> % <span class="number">10</span>];</span><br><span class="line">                LedBuff[<span class="number">3</span>] = LedChar[sec / <span class="number">1000</span> % <span class="number">10</span>];</span><br><span class="line">                LedBuff[<span class="number">4</span>] = LedChar[sec / <span class="number">10000</span> % <span class="number">10</span>];</span><br><span class="line">                LedBuff[<span class="number">5</span>] = LedChar[sec / <span class="number">10000</span> % <span class="number">10</span>];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//每次1ms中断都要刷新一下数码管</span></span><br><span class="line">            <span class="comment">//以下为数码管动态扫描刷新</span></span><br><span class="line">            P0 = <span class="number">0xFF</span>;  <span class="comment">//消影</span></span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span>)</span><br><span class="line">            &#123;ADDR2 = <span class="number">0</span>;ADDR1 = <span class="number">0</span>;ADDR0 = <span class="number">0</span>;i++;P0 = LedBuff[<span class="number">0</span>];&#125;    <span class="comment">//第一次溢出点亮第一个数码管</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">1</span>)</span><br><span class="line">            &#123;ADDR2 = <span class="number">0</span>;ADDR1 = <span class="number">0</span>;ADDR0 = <span class="number">1</span>;i++;P0 = LedBuff[<span class="number">1</span>];&#125;    <span class="comment">//第二次溢出点亮第二个数码管</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">2</span>)</span><br><span class="line">            &#123;ADDR2 = <span class="number">0</span>;ADDR1 = <span class="number">1</span>;ADDR0 = <span class="number">0</span>;i++;P0 = LedBuff[<span class="number">2</span>];&#125;    <span class="comment">//第三次溢出点亮第三个数码管</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">3</span>)</span><br><span class="line">            &#123;ADDR2 = <span class="number">0</span>;ADDR1 = <span class="number">1</span>;ADDR0 = <span class="number">1</span>;i++;P0 = LedBuff[<span class="number">3</span>];&#125;    <span class="comment">//第四次溢出点亮第四个数码管</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">4</span>)</span><br><span class="line">            &#123;ADDR2 = <span class="number">1</span>;ADDR1 = <span class="number">0</span>;ADDR0 = <span class="number">0</span>;i++;P0 = LedBuff[<span class="number">4</span>];&#125;    <span class="comment">//第五次溢出点亮第五个数码管</span></span><br><span class="line">            <span class="keyword">else</span>(i == <span class="number">5</span>)</span><br><span class="line">            &#123;ADDR2 = <span class="number">1</span>;ADDR1 = <span class="number">0</span>;ADDR0 = <span class="number">1</span>;i = <span class="number">0</span>;P0 = LedBuff[<span class="number">5</span>];&#125;  <span class="comment">//第六次溢出点亮第六个数码管</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;使用switch语句的方式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">include&lt;reg52.h&gt;</span><br><span class="line"></span><br><span class="line">sbit ADDR0 = P1^<span class="number">0</span>;</span><br><span class="line">sbit ADDR1 = P1^<span class="number">1</span>;</span><br><span class="line">sbit ADDR2 = P1^<span class="number">2</span>;</span><br><span class="line">sbit ADDR3 = P1^<span class="number">3</span>;</span><br><span class="line">sbit ENLED = P1^<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用数组来存储数码管的真值表</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> code LedChar[] = &#123;</span><br><span class="line">    <span class="number">0xC0</span>, <span class="number">0xF9</span>, <span class="number">0xA4</span>, <span class="number">0xB0</span>, <span class="number">0x99</span>, <span class="number">0x92</span>, <span class="number">0x82</span>, <span class="number">0xF8</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x90</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//数码管显示缓冲区，初值0xFF确保启动是所有数码管都不亮</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> LedBuff[<span class="number">6</span>] = &#123;</span><br><span class="line">    <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//声明局部变量语句</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> cnt = <span class="number">0</span>;   <span class="comment">//记录T0溢出次数</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> i = <span class="number">0</span>;    <span class="comment">//动态扫描的索引，即数码管的脚标</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> sec = <span class="number">0</span>;  <span class="comment">//记录经过的秒数</span></span><br><span class="line">    <span class="comment">//执行语句</span></span><br><span class="line">    <span class="comment">//LED部分</span></span><br><span class="line">    ENLED = <span class="number">0</span>;  <span class="comment">//使能U3的74HC138</span></span><br><span class="line">    ADDR3 = <span class="number">1</span>;  <span class="comment">//因为需要动态改变ADDR0-2的值，所有不用再初始化了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定时器部分</span></span><br><span class="line">    TMOD = <span class="number">0x01</span>;    <span class="comment">//设定定时器T0为模式1</span></span><br><span class="line">    TH0 = <span class="number">0xFC</span>;     <span class="comment">//T0赋值0xFC67，定时为1ms</span></span><br><span class="line">    TL0 = <span class="number">0x67</span>;</span><br><span class="line">    TR0 = <span class="number">1</span>;    <span class="comment">//启动T0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(TF0 == <span class="number">1</span>)    <span class="comment">//判断定时器T0是否溢出，即为已计时1ms</span></span><br><span class="line">        &#123;</span><br><span class="line">            TF0 = <span class="number">0</span>;    <span class="comment">//定时器T0溢出后，清除中断标志</span></span><br><span class="line">            TH0 = <span class="number">0xFC</span>; <span class="comment">//定时器T0溢出后，重新赋值</span></span><br><span class="line">            TL0 = <span class="number">0x67</span>;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">if</span>(cnt &gt;= <span class="number">1000</span> )    <span class="comment">//达到1s</span></span><br><span class="line">            &#123;</span><br><span class="line">                cnt = <span class="number">0</span>;    <span class="comment">//达到1s后计数清零</span></span><br><span class="line">                sec++;      <span class="comment">//经过一秒秒计数加1</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//以下代码将sec按十进制从低位到高位依次存到显示缓冲区中</span></span><br><span class="line">                LedBuff[<span class="number">0</span>] = LedChar[sec % <span class="number">10</span>];</span><br><span class="line">                LedBuff[<span class="number">1</span>] = LedChar[sec / <span class="number">10</span> % <span class="number">10</span>];</span><br><span class="line">                LedBuff[<span class="number">2</span>] = LedChar[sec / <span class="number">100</span> % <span class="number">10</span>];</span><br><span class="line">                LedBuff[<span class="number">3</span>] = LedChar[sec / <span class="number">1000</span> % <span class="number">10</span>];</span><br><span class="line">                LedBuff[<span class="number">4</span>] = LedChar[sec / <span class="number">10000</span> % <span class="number">10</span>];</span><br><span class="line">                LedBuff[<span class="number">5</span>] = LedChar[sec / <span class="number">10000</span> % <span class="number">10</span>];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//每次1ms中断都要刷新一下数码管</span></span><br><span class="line">            <span class="comment">//以下为数码管动态扫描刷新</span></span><br><span class="line">            P0 = <span class="number">0xFF</span>;  <span class="comment">//消影</span></span><br><span class="line">            <span class="keyword">switch</span>(i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span> : ADDR2 = <span class="number">0</span>;ADDR1 = <span class="number">0</span>;ADDR0 = <span class="number">0</span>;i++;P0 = LedBuff[<span class="number">0</span>];<span class="keyword">break</span>;     <span class="comment">//第一次溢出点亮第一个数码管</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span> : ADDR2 = <span class="number">0</span>;ADDR1 = <span class="number">0</span>;ADDR0 = <span class="number">1</span>;i++;P0 = LedBuff[<span class="number">1</span>];<span class="keyword">break</span>;     <span class="comment">//第二次溢出点亮第二个数码管</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span> : ADDR2 = <span class="number">0</span>;ADDR1 = <span class="number">1</span>;ADDR0 = <span class="number">0</span>;i++;P0 = LedBuff[<span class="number">2</span>];<span class="keyword">break</span>;     <span class="comment">//第三次溢出点亮第三个数码管</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span> : ADDR2 = <span class="number">0</span>;ADDR1 = <span class="number">1</span>;ADDR0 = <span class="number">1</span>;i++;P0 = LedBuff[<span class="number">3</span>];<span class="keyword">break</span>;     <span class="comment">//第四次溢出点亮第四个数码管</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span> : ADDR2 = <span class="number">1</span>;ADDR1 = <span class="number">0</span>;ADDR0 = <span class="number">0</span>;i++;P0 = LedBuff[<span class="number">4</span>];<span class="keyword">break</span>;     <span class="comment">//第五次溢出点亮第五个数码管</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span> : ADDR2 = <span class="number">1</span>;ADDR1 = <span class="number">0</span>;ADDR0 = <span class="number">1</span>;i++;P0 = LedBuff[<span class="number">5</span>];<span class="keyword">break</span>;     <span class="comment">//第六次溢出点亮第六个数码管</span></span><br><span class="line">                <span class="keyword">default</span> : <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="动态显示的消影和消抖"><a href="#动态显示的消影和消抖" class="headerlink" title="动态显示的消影和消抖"></a>动态显示的消影和消抖</h4><p>&emsp;&emsp;在上述程序运行时会出现两个问题现象，一个是数码管不该发光的地方也会微微发光，这个称之为“鬼影”。一个是数码管每次加1的时候都会有一次“抖动”。</p>
<p>&emsp;&emsp;“鬼影”的原因在于程序是逐行运行的，数码管进行动态扫描切换的时候，比如第二个数码管切换到第三个数码管时，运行到case1的ADDR1的时候，这时候ADDR0还没被重新赋值，这一瞬间，ADDR2=0，ADDR1=1，ADDR0=1，这个是case3也就点亮了第四个数码管，而此时P0依旧保持这LedBuff[1]的值，在这一瞬间，第四个数码管亮起了第二个数码管该显示的数值。虽然时间很短（一个机器周期），但也足以让肉眼捕捉到这个现象。<br>&emsp;&emsp;“鬼影”的解决办法：在每次对ADDR0-2进行赋值之前，给P0赋值0xFF，这样数码管就不会再出现“鬼影”了。</p>
<p>&emsp;&emsp;“抖动”的原因在于，运行计算秒数加1并转换为缓冲区也是比较花时间的。每次定时器经过1000回进入运算秒数和转换的时候，会去处理这个运算，运算结束后才去处理刷新数码管，就导致某个数码管显示的时间要比其他情况下要长一点，而此时其他数码管熄灭的时间就会长，如果这段程序运行时间很短的话就可以忽略不计，但这段程序运行时间已经长到影响视觉效果了。</p>
<p>&emsp;&emsp;“抖动”的解决办法：利用中断。</p>
<h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h3><p>&emsp;&emsp;中断的意思是运行过程中出现了需要优先处理的紧急事件。当出现紧急事件时，控制器将优先处理中断事件。以动态显示为例，当cnt=1000时，控制器进行运算秒数和转换，这时定时器T0又到了1ms的定时，那么触发中断，控制器优先去处理刷新数码管的事情了。（如定时器控制寄存器所示，TFn为定时器中断时会置1，之前由于没有开中断，所以定时器即使触发了中断，也只会将TFn置1，如果开了定时器的中断，那么在定时器触发中断的时候，不但会把TFn置1，还会优先去处理中断函数里的程序）</p>
<p>&emsp;&emsp;<strong>中断相关又2个寄存器，分别为中断使能寄存器IE和中断优先级寄存器IP。</strong></p>
<h4 id="中断使能寄存器"><a href="#中断使能寄存器" class="headerlink" title="中断使能寄存器"></a>中断使能寄存器</h4><p>&emsp;&emsp;中断使能寄存器有1个，为IE，SFR地址位0xA8，可位寻址，各个位的复位值均为0。中断使能寄存器的作用是各种中断的开关。</p>
<p>&emsp;&emsp;中断使能寄存器各个位的作用：<br>&emsp;&emsp;&emsp;EA（位7）：总中断使能位，相当于总开关。<br>&emsp;&emsp;&emsp;保留（位6）：位6为保留位。<br>&emsp;&emsp;&emsp;ET2（位5）：定时器2中断使能。<br>&emsp;&emsp;&emsp;ES（位4）：串口中断使能。<br>&emsp;&emsp;&emsp;ET1（位3）：定时器1中断使能。<br>&emsp;&emsp;&emsp;EX1（位2）：外部中断1使能。<br>&emsp;&emsp;&emsp;ET0（位1）：定时器0中断使能。<br>&emsp;&emsp;&emsp;EX0（位0）：外部中断0使能。</p>
<p>&emsp;&emsp;使用中断函数：中断函数是输入为空，输出为空的函数，所以格式为</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InterruptTimer0</span><span class="params">()</span> interrupt 1</span><br><span class="line">&#123;</span><br><span class="line">    中断触发时要执行语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;其中函数名可以随便取，但建议使用规范的命名方式，interrupt为关键字，跟在函数后面。1为中断查询序列，T0中断为1，下图为其他中断查询序列的函数编号。</p>
<p><img src="%E4%B8%AD%E6%96%AD%E6%9F%A5%E8%AF%A2%E5%BA%8F%E5%88%97.png" alt="中断查询序列"></p>
<p>&emsp;&emsp;中断函数不需要调用，当满足中断条件而触发中断的时候，系统会自动调用中断函数，而像定时器中有一个中断标志位TFn会被自动清零，也就是硬件清零（之前通过程序TF0=0为软件清零）。</p>
<p>&emsp;&emsp;利用中断消除数码管刷新的抖动</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">include&lt;reg52.h&gt;</span><br><span class="line"></span><br><span class="line">sbit ADDR0 = P1^<span class="number">0</span>;</span><br><span class="line">sbit ADDR1 = P1^<span class="number">1</span>;</span><br><span class="line">sbit ADDR2 = P1^<span class="number">2</span>;</span><br><span class="line">sbit ADDR3 = P1^<span class="number">3</span>;</span><br><span class="line">sbit ENLED = P1^<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用数组来存储数码管的真值表</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> code LedChar[] = &#123;</span><br><span class="line">    <span class="number">0xC0</span>, <span class="number">0xF9</span>, <span class="number">0xA4</span>, <span class="number">0xB0</span>, <span class="number">0x99</span>, <span class="number">0x92</span>, <span class="number">0x82</span>, <span class="number">0xF8</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x90</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//数码管显示缓冲区，初值0xFF确保启动是所有数码管都不亮</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> LedBuff[<span class="number">6</span>] = &#123;</span><br><span class="line">    <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明全局变量，这里的变量main函数和中断函数都要用</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> cnt = <span class="number">0</span>;   <span class="comment">//记录T0溢出次数</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i = <span class="number">0</span>;    <span class="comment">//动态扫描的索引，即数码管的脚标</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> flag1s = <span class="number">0</span>    <span class="comment">//到达1s的标志位</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//声明局部变量语句</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> sec = <span class="number">0</span>;  <span class="comment">//记录经过的秒数</span></span><br><span class="line">    <span class="comment">//执行语句</span></span><br><span class="line">    <span class="comment">//LED部分</span></span><br><span class="line">    ENLED = <span class="number">0</span>;  <span class="comment">//使能U3的74HC138</span></span><br><span class="line">    ADDR3 = <span class="number">1</span>;  <span class="comment">//因为需要动态改变ADDR0-2的值，所有不用再初始化了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//中断部分</span></span><br><span class="line">    EA = <span class="number">1</span>; <span class="comment">//使能总中断</span></span><br><span class="line">    ET0 = <span class="number">1</span>;    <span class="comment">//使能T0中断</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定时器部分</span></span><br><span class="line">    TMOD = <span class="number">0x01</span>;    <span class="comment">//设定定时器T0为模式1</span></span><br><span class="line">    TH0 = <span class="number">0xFC</span>;     <span class="comment">//T0赋值0xFC67，定时为1ms</span></span><br><span class="line">    TL0 = <span class="number">0x67</span>;</span><br><span class="line">    TR0 = <span class="number">1</span>;    <span class="comment">//启动T0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(flag1s == <span class="number">1</span>)    <span class="comment">//判断1s标志位是否为1</span></span><br><span class="line">        &#123;</span><br><span class="line">            flag1s = <span class="number">0</span>; <span class="comment">//1s标志位清零</span></span><br><span class="line">            sec++;      <span class="comment">//经过一秒秒计数加1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//以下代码将sec按十进制从低位到高位依次存到显示缓冲区中</span></span><br><span class="line">            LedBuff[<span class="number">0</span>] = LedChar[sec % <span class="number">10</span>];</span><br><span class="line">            LedBuff[<span class="number">1</span>] = LedChar[sec / <span class="number">10</span> % <span class="number">10</span>];</span><br><span class="line">            LedBuff[<span class="number">2</span>] = LedChar[sec / <span class="number">100</span> % <span class="number">10</span>];</span><br><span class="line">            LedBuff[<span class="number">3</span>] = LedChar[sec / <span class="number">1000</span> % <span class="number">10</span>];</span><br><span class="line">            LedBuff[<span class="number">4</span>] = LedChar[sec / <span class="number">10000</span> % <span class="number">10</span>];</span><br><span class="line">            LedBuff[<span class="number">5</span>] = LedChar[sec / <span class="number">10000</span> % <span class="number">10</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*定时器T0的中断函数*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InterruptTimer0</span><span class="params">()</span> interrupt 1  <span class="comment">//进入中断函数即为定时器到1ms</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//定时器溢出时的中断标志位会被中断函数自动清零</span></span><br><span class="line">    TH0 = <span class="number">0xFC</span>;    <span class="comment">//定时器T0溢出后，重新赋值</span></span><br><span class="line">    TL0 = <span class="number">0x67</span>;</span><br><span class="line">    cnt++;</span><br><span class="line">    <span class="keyword">if</span>(cnt &gt;= <span class="number">1000</span> )    <span class="comment">//达到1s</span></span><br><span class="line">    &#123;</span><br><span class="line">        cnt = <span class="number">0</span>;    <span class="comment">//达到1s后计数清零</span></span><br><span class="line">        flag1s = <span class="number">1</span>;      <span class="comment">//1s标志位置1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每次1ms中断都要刷新一下数码管</span></span><br><span class="line">    <span class="comment">//以下为数码管动态扫描刷新</span></span><br><span class="line">    P0 = <span class="number">0xFF</span>;  <span class="comment">//消影</span></span><br><span class="line">    <span class="keyword">switch</span>(i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span> : ADDR2 = <span class="number">0</span>;ADDR1 = <span class="number">0</span>;ADDR0 = <span class="number">0</span>;i++;P0 = LedBuff[<span class="number">0</span>];<span class="keyword">break</span>;     <span class="comment">//第一次溢出点亮第一个数码管</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span> : ADDR2 = <span class="number">0</span>;ADDR1 = <span class="number">0</span>;ADDR0 = <span class="number">1</span>;i++;P0 = LedBuff[<span class="number">1</span>];<span class="keyword">break</span>;     <span class="comment">//第二次溢出点亮第二个数码管</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span> : ADDR2 = <span class="number">0</span>;ADDR1 = <span class="number">1</span>;ADDR0 = <span class="number">0</span>;i++;P0 = LedBuff[<span class="number">2</span>];<span class="keyword">break</span>;     <span class="comment">//第三次溢出点亮第三个数码管</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span> : ADDR2 = <span class="number">0</span>;ADDR1 = <span class="number">1</span>;ADDR0 = <span class="number">1</span>;i++;P0 = LedBuff[<span class="number">3</span>];<span class="keyword">break</span>;     <span class="comment">//第四次溢出点亮第四个数码管</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span> : ADDR2 = <span class="number">1</span>;ADDR1 = <span class="number">0</span>;ADDR0 = <span class="number">0</span>;i++;P0 = LedBuff[<span class="number">4</span>];<span class="keyword">break</span>;     <span class="comment">//第五次溢出点亮第五个数码管</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span> : ADDR2 = <span class="number">1</span>;ADDR1 = <span class="number">0</span>;ADDR0 = <span class="number">1</span>;i++;P0 = LedBuff[<span class="number">5</span>];<span class="keyword">break</span>;     <span class="comment">//第六次溢出点亮第六个数码管</span></span><br><span class="line">        <span class="keyword">default</span> : <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="中断优先级寄存器"><a href="#中断优先级寄存器" class="headerlink" title="中断优先级寄存器"></a>中断优先级寄存器</h4><p>&emsp;&emsp;中断优先级寄存器有1个，为IP，SFR地址位0xB8，可位寻址，各个位的复位值均为0。中断使能寄存器的作用是设置各中断的优先级。</p>
<p>&emsp;&emsp;中断的优先级分为两种：<br>&emsp;&emsp;&emsp;一种是固有优先级，也就是中断查询序列的默认优先级，外部中断0最高，T2中断最低。如果不配置中断优先级寄存器的话就按这个默认优先级。<br>&emsp;&emsp;&emsp;还有一种是抢占优先级，也就是中断优先级寄存器配置的。配置了抢占优先级的中断比其他优先级更高了，即上升到最高的优先级。</p>
<p>&emsp;&emsp;中断优先级寄存器各个位的作用：<br>&emsp;&emsp;&emsp;保留（位7）：位7为保留位。<br>&emsp;&emsp;&emsp;保留（位6）：位6为保留位。<br>&emsp;&emsp;&emsp;PT2（位5）：定时器2中断优先级控制位。<br>&emsp;&emsp;&emsp;PS（位4）：串口中断优先级控制位。<br>&emsp;&emsp;&emsp;PT1（位3）：定时器1中断优先级控制位。<br>&emsp;&emsp;&emsp;PX1（位2）：外部中断1中断优先级控制位。<br>&emsp;&emsp;&emsp;PT0（位1）：定时器0中断优先级控制位。<br>&emsp;&emsp;&emsp;PX0（位0）：外部中断0中断优先级控制位。</p>
<p>&emsp;&emsp;<strong>抢占优先级为，当进入低优先级中断中执行时，如果又发生了高优先级的中断，则立刻进入高优先级中断执行，处理完高优先级中断后，再返回处理低优先级中断，这个过程称之为中断嵌套，也称之为抢占。</strong></p>
<p>&emsp;&emsp;<strong>固有优先级和抢占优先级的不同点为不具有抢占属性，也就是说即使在低优先级中断执行过程中又发生了高优先级的中断，那么高优先级的中断也只能等到低优先级中断执行完后才能得到响应。</strong><br>&emsp;&emsp;固有优先级存在的意义为当两个中断同时请求，那么先处理高优先级的中断，以及，出于某种原因把总中断关掉了，在关掉总中断期间发生了多个中断，后又将总中断开启，那么这时就按照固有优先级的高低排序依次执行。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.bilibili.com/video/BV1RJ411k74J">手把手教你学51单片机-视频教程</a></p>
<p><a href="http://res.kingst.site/kfs/doc/%e6%89%8b%e6%8a%8a%e6%89%8b%e6%95%99%e4%bd%a0%e5%ad%a651%e5%8d%95%e7%89%87%e6%9c%ba-C%e8%af%ad%e8%a8%80%e7%89%88.pdf">手把手教你学51单片机-电子书教材</a></p>
<p><a href="http://www.qdkingst.com/cn">KingST官网</a></p>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C51</tag>
      </tags>
  </entry>
  <entry>
    <title>KingST开发板C51单片机学习笔记-Cheaper 5</title>
    <url>/2022/04/26/Study-KingST51-Cheaper5/</url>
    <content><![CDATA[<p>本篇为KingST的C51单片机的学习笔记，Cheaper 5为讲解基础的逻辑电路，定时器与数码管。</p>
<span id="more"></span>

<h2 id="Chapter-5-定时器与数码管"><a href="#Chapter-5-定时器与数码管" class="headerlink" title="Chapter 5 定时器与数码管"></a>Chapter 5 定时器与数码管</h2><h3 id="逻辑电路和逻辑运算"><a href="#逻辑电路和逻辑运算" class="headerlink" title="逻辑电路和逻辑运算"></a>逻辑电路和逻辑运算</h3><p><img src="%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF.png" alt="逻辑电路"></p>
<h4 id="逻辑与-emsp-amp-amp"><a href="#逻辑与-emsp-amp-amp" class="headerlink" title="逻辑与&emsp;&amp;&amp;"></a>逻辑与&emsp;&amp;&amp;</h4><p>&emsp;&emsp;F=A&amp;&amp;B，当A、B的值都为真，其运算结果F为真，当A、B的值任意一个为假，其运算结果F为假。</p>
<h4 id="逻辑或-emsp"><a href="#逻辑或-emsp" class="headerlink" title="逻辑或&emsp;||"></a>逻辑或&emsp;||</h4><p>&emsp;&emsp;F=A||B，当A、B的值任意一个为真，其运算结果F为真，当A、B的值都为假，其运算结果F为假。</p>
<h4 id="逻辑非-emsp-emsp"><a href="#逻辑非-emsp-emsp" class="headerlink" title="逻辑非&emsp;!&emsp;"></a>逻辑非&emsp;!&emsp;</h4><p>&emsp;&emsp;F=!A，当A的值为真，其运算结果F为假，当A的值都为假，其运算结果F为真。</p>
<h4 id="按位与-emsp-amp"><a href="#按位与-emsp-amp" class="headerlink" title="按位与&emsp;&amp;"></a>按位与&emsp;&amp;</h4><p>&emsp;&emsp;F=A&amp;B，将A、B两个字节的每一位都进行与运算，其运算结果为F。例如A=1100 1100、B=1111 0000，则F=1100 0000。</p>
<h4 id="按位或-emsp"><a href="#按位或-emsp" class="headerlink" title="按位或&emsp;|"></a>按位或&emsp;|</h4><p>&emsp;&emsp;F=A|B，将A、B两个字节的每一位都进行或运算，其运算结果为F。例如A=1100 1100、B=1111 0000，则F=1111 1100。</p>
<h4 id="按位取反-emsp"><a href="#按位取反-emsp" class="headerlink" title="按位取反&emsp;~"></a>按位取反&emsp;~</h4><p>&emsp;&emsp;F=~A，将A的每一位都进行取反运算，其运算结果为F。例如A=1100 1100，F=0011 0011。</p>
<h4 id="按位异或-emsp"><a href="#按位异或-emsp" class="headerlink" title="按位异或&emsp;^"></a>按位异或&emsp;^</h4><p>&emsp;&emsp;F=A^B，异或的意思是，如果运算双方的值不同则为真，如果运算双方的值相同则为假。例如A=1100 1100、B=1111 0000，则F=0011 1100。</p>
<h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p>&emsp;&emsp;<strong>时钟周期：时钟周期T是时序中最小的时间单位。</strong>具体算法就是时钟周期=1/时钟源频率，KST-51开发板上用的晶振是11.0592MHz，所以时钟周期为1/11059200秒。</p>
<p>&emsp;&emsp;<strong>机器周期：单片机完成一个操作的最短时间（主要针对与汇编语言，汇编语言程序每一条语句的执行所用的时间都是机器周期的整数倍）。</strong>标准51单片机（C51）的一个机器周期是12个时钟周期，也就是12/11059200秒。</p>
<p>&emsp;&emsp;标准51单片机（C51）有两个定时器/计数器，为T0，T1。而STC89C52的资源多个定时器/计数器T2。目前先不看T2，只看T0和T1。<strong>T0和T1共3种6个寄存器，分别为定时值存储寄存器：T0高八位TH0，T0低八位TL0，T1高八位TH1，T1低八位TL1；定时器控制寄存器：TCON；定时器模式寄存器：TMOD。</strong></p>
<h4 id="定时存储寄存器"><a href="#定时存储寄存器" class="headerlink" title="定时存储寄存器"></a>定时存储寄存器</h4><p>&emsp;&emsp;定时存储寄存器有4个，TH0，TL0，TH1，TL1。<br>&emsp;&emsp;&emsp;TH0寄存器：SFR地址为0x8C，复位值为0x00，不可位寻址<br>&emsp;&emsp;&emsp;TL0寄存器：SFR地址为0x8A，复位值为0x00，不可位寻址<br>&emsp;&emsp;&emsp;TH1寄存器：SFR地址为0x8D，复位值为0x00，不可位寻址<br>&emsp;&emsp;&emsp;TL1寄存器：SFR地址为0x8B，复位值为0x00，不可位寻址</p>
<p>&emsp;&emsp;定时存储器的作用为当低八位计满时，高八位计1，直至高八位低八位全部被计满就重新开始计。</p>
<h4 id="定时控制寄存器"><a href="#定时控制寄存器" class="headerlink" title="定时控制寄存器"></a>定时控制寄存器</h4><p>&emsp;&emsp;定时器控制寄存器有1个，为TCON，SFR地址位0x88，可位寻址，各个位的复位值均为0。</p>
<p>&emsp;&emsp;TCON的各个位的作用：<br>&emsp;&emsp;&emsp;TF1（位7）：定时器1溢出标志位。一旦定时器1发生溢出（高八位和低八位都计满）时硬件置1.清零方式有两种，分别位软件清零（通过程序清零）和硬件清零（通过看门狗之类的单片机自动清零）。<br>&emsp;&emsp;&emsp;TR1（位6）：定时器1运行控制位。软件置位/清零来进行启动/停止定时器。<br>&emsp;&emsp;&emsp;TF0（位5）：定时器0溢出标志位。作用和TF1一样。<br>&emsp;&emsp;&emsp;TR0（位4）：定时器1运行控制位。作用和TR1一样。<br>&emsp;&emsp;&emsp;IE1（位3）：中断相关先不管。<br>&emsp;&emsp;&emsp;IT1（位2）：中断相关先不管。<br>&emsp;&emsp;&emsp;IE0（位1）：中断相关先不管。<br>&emsp;&emsp;&emsp;IT0（位0）：中断相关先不管。  </p>
<p><img src="%E5%AE%9A%E6%97%B6%E5%99%A8%E6%8E%A7%E5%88%B6%E5%AF%84%E5%AD%98%E5%99%A8TCON.png" alt="定时器控制寄存器TCON"></p>
<p>&emsp;&emsp;TR1（位6）/TR0（位4）：<strong>定时器运行位</strong>当程序中写TR = 1以后，定时器就会每经过一个机器周期自动加1。当程序中写TR = 0以后，定时器就停止加1，其值（TH1/0和TL1/0）保持不变。</p>
<p>&emsp;&emsp;TF1（位7）/TF0（位5）：<strong>定时器标志位</strong>它的作用是告诉我们定时器溢出了。当TH1/0和TL1/0同时计满时，TF1/0会自动变成1，但不影响定时器继续工作。</p>
<h4 id="定时模式寄存器"><a href="#定时模式寄存器" class="headerlink" title="定时模式寄存器"></a>定时模式寄存器</h4><p>&emsp;&emsp;定时器模式寄存器有1个，为TMOD，SFR地址位0x89，不可位寻址，复位值位0x00。</p>
<p>&emsp;&emsp;TMOD的各个位的作用：<br>&emsp;&emsp;&emsp;GATE（位7）：定时器1门控位。置1时只有在INT1脚为高及TR1控制位置1才可以打开定时器。<br>&emsp;&emsp;&emsp;C/T（位6）：T1的定时器计数器选择位。清零时为选择定时器，置1时为选择计数器。<br>&emsp;&emsp;&emsp;M1（位5）：M1和M0共同组成T1的4种工作模式的选择。<br>&emsp;&emsp;&emsp;M0（位4）：M1和M0共同组成T1的4种工作模式的选择。<br>&emsp;&emsp;&emsp;GATE（位3）：定时器0门控位。作用和GATE（位7）也就是T1的相同<br>&emsp;&emsp;&emsp;C/T（位2）：T0的定时器计数器选择位。作用和C/T（位6）也就是T1的选择位相同<br>&emsp;&emsp;&emsp;M1（位1）：M1和M0共同组成T0的4种工作模式的选择。<br>&emsp;&emsp;&emsp;M0（位0）：M1和M0共同组成T0的4种工作模式的选择。  </p>
<p><img src="%E5%AE%9A%E6%97%B6%E5%99%A8%E6%A8%A1%E5%BC%8F%E5%AF%84%E5%AD%98%E5%99%A8TMOD.png" alt="定时器模式寄存器TMOD"></p>
<p>&emsp;&emsp;定时器的4种工作模式：<br>&emsp;&emsp;&emsp;M1=0，M0=0的模式0：兼容8048单片机的13位定时器，THn的8位和TLn的5位组成13位定时器。（不常用）</p>
<p><img src="TMOD-Mod0.png" alt="TMOD-Mod0"></p>
<p>&emsp;&emsp;&emsp;M1=0，M0=1的模式1：THn和TLn组成一个16位的定时器。（最常用）</p>
<p><img src="TMOD-Mod1.png" alt="TMOD-Mod1"></p>
<p>&emsp;&emsp;&emsp;M1=1，M0=0的模式2：8位自动重装模式，定时器溢出后将THn重装到TLn。（溢出后将THn的值赋值给TLn）</p>
<p><img src="TMOD-Mod2.png" alt="TMOD-Mod2"></p>
<p>&emsp;&emsp;&emsp;M1=1，M0=1的模式3：禁用定时器1，定时器0变成2个8位定时器。（不常用）</p>
<p><img src="TMOD-Mod3.png" alt="TMOD-Mod3"></p>
<p>&emsp;&emsp;根据模式示意图，定时器部分OSC为时钟频率，d为12，出来的就是机器周期。要启动定时器，C/T要清零，为选择定时器，控制那里要置1，那么与门两边都要为1，那么TRn就要为1，下路的或门的输出也要为1，或门输出为1，那么INTn和非门输出至少有一个为1，非门为GATE位的取反。所以，得出：<br>&emsp;&emsp;&emsp;1.TRn一定要置1。<br>&emsp;&emsp;&emsp;2.当INTn（P3.2引脚）为1时，GATE清零置1都可以。当INTn为0时，GATE一定要清零，定时器才会工作。<br>&emsp;&emsp;&emsp;3.C/T=0时，为定时器，<strong>定时器本质就是计数器，只是它计数的是晶振的数</strong>计数经过了几个机器周期。C/T=1时，为计数器，就是计数外部脉冲的个数。</p>
<h4 id="定时器的使用的一般流程"><a href="#定时器的使用的一般流程" class="headerlink" title="定时器的使用的一般流程"></a>定时器的使用的一般流程</h4><p>&emsp;&emsp;使用定时器一般需要以下步骤：<br>&emsp;&emsp;&emsp;第一步：设置定时器模式寄存器TMOD，配置好工作模式（不可位寻址，按字节赋值）。<br>&emsp;&emsp;&emsp;第二步：设置定时器存储寄存器THn和TLn的初始值（不可位寻址，按字节赋值，通常位TH0=0xB8，TL0=0x00即位0。02s）。<br>&emsp;&emsp;&emsp;第三步：设置定时器控制寄存器TCON，可位寻址，所以通过TRn置1来让定时器开始计数。<br>&emsp;&emsp;&emsp;第四步：判断定时器控制寄存器TCON中的TFn位来监测定时器溢出情况。<br>&emsp;&emsp;关于THn=0xB8，TLn=0x00的计算。一个机器周期位12/11059200秒，当计到第18432个机器周期即位经过了0.02s。而溢出值是65536，那么从65536-18432=47104开始计，经过18432个机器周期（0.02s），定时器就溢出了，同时TFn被置1.而47104的16进制就是0xB800，即高八位位0xB8，低八位位0x00。利用定时0.02s可以使用50倍变成1s。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#inluced<span class="string">&lt;reg52.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">sbit LED = P0^<span class="number">0</span>;</span><br><span class="line">sbit ADDR0 = P1^<span class="number">0</span>;</span><br><span class="line">sbit ADDR1 = P1^<span class="number">1</span>;</span><br><span class="line">sbit ADDR2 = P1^<span class="number">2</span>;</span><br><span class="line">sbit ADDR3 = P1^<span class="number">3</span>;</span><br><span class="line">sbit ENLED = P1^<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//声明语句</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> cnt = <span class="number">0</span>;  <span class="comment">//用于记录T0溢出次数</span></span><br><span class="line">    <span class="comment">//执行语句</span></span><br><span class="line">    <span class="comment">//LED部门</span></span><br><span class="line">    ENLED = <span class="number">0</span>;  <span class="comment">//使能U3的74HC138</span></span><br><span class="line">    ADDR3 = <span class="number">1</span>;</span><br><span class="line">    ADDR2 = <span class="number">1</span>;  <span class="comment">//使LEDS6输出低电平来选择独立LED</span></span><br><span class="line">    ADDR1 = <span class="number">1</span>;</span><br><span class="line">    ADDR0 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定时器部分</span></span><br><span class="line">    TMOD = <span class="number">0x01</span>;    <span class="comment">//设置T0为模式1</span></span><br><span class="line">    TH0 = <span class="number">0xB8</span>;     <span class="comment">//T0赋初值为0xB800即为0.02s</span></span><br><span class="line">    TL0 = <span class="number">0x00</span>;</span><br><span class="line">    TR0 = <span class="number">1</span>;    <span class="comment">//启动T0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(TF0 == <span class="number">1</span>)    <span class="comment">//判断T0是否溢出，1为溢出</span></span><br><span class="line">        &#123;</span><br><span class="line">            TF0 = <span class="number">0</span>;    <span class="comment">//T0溢出后，清除标志</span></span><br><span class="line">            TH0 = <span class="number">0xB8</span>; <span class="comment">//溢出后会重新计数，所以需要再赋值</span></span><br><span class="line">            TL0 = <span class="number">0x00</span>;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">if</span>(cnt &gt;= <span class="number">50</span>)   <span class="comment">//溢出50次为过了1s</span></span><br><span class="line">            &#123;</span><br><span class="line">                cnt = <span class="number">0</span>;    <span class="comment">//达到1s后计数清零</span></span><br><span class="line">                LED = ~LED; <span class="comment">//LED取反即为亮灭闪烁</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数码管基础"><a href="#数码管基础" class="headerlink" title="数码管基础"></a>数码管基础</h3><h4 id="点亮数码管"><a href="#点亮数码管" class="headerlink" title="点亮数码管"></a>点亮数码管</h4><p>&emsp;&emsp;数码管也是一种LED，常见的数码管分为共阴和共阳。共阴就是所有LED的阴极连接在一起，由阳极控制小灯的亮灭。共阳就是所有LED的阳极连接在一起，由阴极控制小灯的亮灭。</p>
<p><img src="%E6%95%B0%E7%A0%81%E7%AE%A1%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="数码管结构示意图"></p>
<p><img src="%E6%95%B0%E7%A0%81%E7%AE%A1%E5%8E%9F%E7%90%86%E5%9B%BE.png" alt="数码管原理图"></p>
<p>&emsp;&emsp;由数码管原理图可以看出通过控制abcdefg和dp来控制数码管的显示。关于公共端由两个，公共端通过的电流较大，所以用两个公共端并联来进行分流。</p>
<p>&emsp;&emsp;由开发板原理图可知，控制最右边的数码管是通过74HC138输出LEDS0为低电平来控制的，所以U3的75HC138为ADDR2，ADDR1和ADDR0都置0，LEDS0输出0。要让数码管显示数字1，那么就点亮b段和c段，对应就是DB1和DB2都置0。对应的P0就是0b1111 1001，十六进制就是0xF9。</p>
<p><img src="%E6%95%B0%E7%A0%81%E7%AE%A1%E7%94%B5%E8%B7%AF.png" alt="数码管电路"></p>
<p><img src="74HC138.png" alt="74HC138"></p>
<p>&emsp;&emsp;数码管显示1的程序。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#inluced<span class="string">&lt;reg52.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">sbit ADDR0 = P1^<span class="number">0</span>;</span><br><span class="line">sbit ADDR1 = P1^<span class="number">1</span>;</span><br><span class="line">sbit ADDR2 = P1^<span class="number">2</span>;</span><br><span class="line">sbit ADDR3 = P1^<span class="number">3</span>;</span><br><span class="line">sbit ENLED = P1^<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//执行语句</span></span><br><span class="line">    ENLED = <span class="number">1</span>;  <span class="comment">//使能U3的74HC138</span></span><br><span class="line">    ADDR3 = <span class="number">1</span>;</span><br><span class="line">    ADDR2 = <span class="number">0</span>;  <span class="comment">//使Q17三极管导通选择控制DS1</span></span><br><span class="line">    ADDR1 = <span class="number">0</span>;</span><br><span class="line">    ADDR0 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    P0 = <span class="number">0xF9</span>;  <span class="comment">//点亮数码管b段和c段即为点亮显示1</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="数码管和定时器结合的计时器"><a href="#数码管和定时器结合的计时器" class="headerlink" title="数码管和定时器结合的计时器"></a>数码管和定时器结合的计时器</h4><p>&emsp;&emsp;数码管每一秒进行加1就为数码管的计时器。数码管0-F的真值表如下。利用数组将真值表的数值填入，利用数组的角标来控制P0的值。可以利用code关键词来将真值表进行修饰，这样真值表就会被写入Flash。从而节约RAM空间。</p>
<p><img src="%E6%95%B0%E7%A0%81%E7%AE%A1%E7%9C%9F%E5%80%BC%E8%A1%A8.png" alt="数码管真值表"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#inluced<span class="string">&lt;reg52.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">sbit ADDR0 = P1^<span class="number">0</span>;</span><br><span class="line">sbit ADDR1 = P1^<span class="number">1</span>;</span><br><span class="line">sbit ADDR2 = P1^<span class="number">2</span>;</span><br><span class="line">sbit ADDR3 = P1^<span class="number">3</span>;</span><br><span class="line">sbit ENLED = P1^<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用数组来存储数码管的真值表</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> code LedChar[] = &#123;</span><br><span class="line">    <span class="number">0xC0</span>, <span class="number">0xF9</span>, <span class="number">0xA4</span>, <span class="number">0xB0</span>, <span class="number">0x99</span>, <span class="number">0x92</span>, <span class="number">0x82</span>, <span class="number">0xF8</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x83</span>, <span class="number">0xC6</span>, <span class="number">0xA1</span>, <span class="number">0x86</span>, <span class="number">0x8E</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//声明语句</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> cnt = <span class="number">0</span>;  <span class="comment">//记录T0溢出次数</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> sec = <span class="number">0</span>;  <span class="comment">//记录经过的秒数</span></span><br><span class="line">    <span class="comment">//执行语句</span></span><br><span class="line">    <span class="comment">//数码管部分</span></span><br><span class="line">    ENLED = <span class="number">0</span>;  <span class="comment">//使能U3的74HC138</span></span><br><span class="line">    ADDR3 = <span class="number">1</span>;</span><br><span class="line">    ADDR2 = <span class="number">0</span>;  <span class="comment">//使Q17三极管导通选择控制DS1</span></span><br><span class="line">    ADDR1 = <span class="number">0</span>;</span><br><span class="line">    ADDR0 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//定时器部分</span></span><br><span class="line">    TMOD = <span class="number">0x01</span>;    <span class="comment">//设置T0为模式1</span></span><br><span class="line">    TH0 = <span class="number">0xB8</span>;     <span class="comment">//T0赋初值为0xB800即为0.02s</span></span><br><span class="line">    TL0 = <span class="number">0x00</span>;</span><br><span class="line">    TR0 = <span class="number">1</span>;    <span class="comment">//启动T0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(TF == <span class="number">1</span>) <span class="comment">//判断T0是否溢出，1为溢出</span></span><br><span class="line">        &#123;</span><br><span class="line">            TF0 = <span class="number">0</span>;    <span class="comment">//T0溢出后，清除标志</span></span><br><span class="line">            TH0 = <span class="number">0xB8</span>; <span class="comment">//溢出后会重新计数，所以需要再赋值</span></span><br><span class="line">            TL0 = <span class="number">0x00</span>;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">if</span>(cnt &gt;= <span class="number">50</span>)   <span class="comment">//溢出50次为过了1s</span></span><br><span class="line">            &#123;</span><br><span class="line">                cnt = <span class="number">0</span>;</span><br><span class="line">                P0 = LEDChar[sec];</span><br><span class="line">                sec++;  <span class="comment">//每经过1秒要加1</span></span><br><span class="line">                <span class="keyword">if</span>(sec &gt;= <span class="number">16</span>)   <span class="comment">//如果秒数超过了16，重新从0开始</span></span><br><span class="line">                &#123;</span><br><span class="line">                    sec = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.bilibili.com/video/BV1RJ411k74J">手把手教你学51单片机-视频教程</a></p>
<p><a href="http://res.kingst.site/kfs/doc/%e6%89%8b%e6%8a%8a%e6%89%8b%e6%95%99%e4%bd%a0%e5%ad%a651%e5%8d%95%e7%89%87%e6%9c%ba-C%e8%af%ad%e8%a8%80%e7%89%88.pdf">手把手教你学51单片机-电子书教材</a></p>
<p><a href="http://www.qdkingst.com/cn">KingST官网</a></p>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C51</tag>
      </tags>
  </entry>
  <entry>
    <title>KingST开发板C51单片机学习笔记-Cheaper 4</title>
    <url>/2022/04/24/Study-KingST51-Cheaper4/</url>
    <content><![CDATA[<p>本篇为KingST的C51单片机的学习笔记，Cheaper 4为讲解一些C语言基础知识和流水灯。</p>
<span id="more"></span>

<h2 id="Chapter-4-C语言和流水灯"><a href="#Chapter-4-C语言和流水灯" class="headerlink" title="Chapter 4 C语言和流水灯"></a>Chapter 4 C语言和流水灯</h2><h3 id="C语言基础"><a href="#C语言基础" class="headerlink" title="C语言基础"></a>C语言基础</h3><h4 id="变量和范围"><a href="#变量和范围" class="headerlink" title="变量和范围"></a>变量和范围</h4><p>&emsp;&emsp;<strong>书写二进制数据时需要加前缀0b，书写十六进制数据时需要加前缀0x。</strong></p>
<p>&emsp;&emsp;C语言的基本类型由<br>&emsp;&emsp;&emsp;字符型：无符号字符型unsigned char(范围为0～255)；字符型signed char(范围-128～127)<br>&emsp;&emsp;&emsp;整型：无符号整型unsigned int(范围为0～65535)；字符型signed int(范围-32768～32767)<br>&emsp;&emsp;&emsp;长整型：无符号字符型unsigned long(范围为0～4294967295)；字符型signed long(范围-2147483648～2147483647)<br>&emsp;&emsp;&emsp;浮点型：单精度浮点型float(范围为-3.4<em>10^38～3.4</em>10^38；双精度浮点型double（C51里等同于float）)</p>
<h4 id="基本运算符"><a href="#基本运算符" class="headerlink" title="基本运算符"></a>基本运算符</h4><p>&emsp;&emsp;C语言中的基本运算符加（+）减（-）乘（*）除（/）取余（%）<br>&emsp;&emsp;C语言中的自加（++）自减（–）。其中a++为先做其他运算，再做自加运算；++a为先做自加运算，再做其他运算。<br>&emsp;&emsp;C语言中的赋值运算符为“=”，即将右边的值赋给左边。<br>&emsp;&emsp;C语言中比较运算符为“==”（判断相等）和“！=”（判断不相等）。<br>&emsp;&emsp;C语言中的移位运算符“&lt;&lt;”左移和“&gt;&gt;”右移。左移为最低位填0补充，其他位向左移动，比如1000 0001左移一位为0000 0010。右移位最高位填0补充，其他位向右移动，比如0000 1111右移一位为0100 0000。<br>&emsp;&emsp;C语言中的取反运算符为“~”这个符号的意思是按位取反。比如1000 0001按位取反后为0111 1110。</p>
<h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4><p>&emsp;&emsp;for循环：<br>&emsp;&emsp;&emsp;执行过程中初始化语句执行且只执行一次。判断语句为条件成立就执行需要执行的语句，条件不成立就跳出循环。更新语句是在需要执行的语句执行完后进行执行。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化语句;判断语句;更新语句)</span><br><span class="line">&#123;</span><br><span class="line">    需要执行的语句</span><br><span class="line">&#125;</span><br><span class="line">例如</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>;i &lt; <span class="number">2</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    a = a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;while循环：<br>&emsp;&emsp;&emsp;如果判断语句为真则执行需要执行的语句，如果判断语句为假则跳出循环。<strong>需要注意的是while循环不带更新，所以在需要执行的语句中需要有更新判断语句的句子，不然就是死循环了。</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(判断语句)</span><br><span class="line">&#123;</span><br><span class="line">    需要执行的语句</span><br><span class="line">&#125;</span><br><span class="line">例如</span><br><span class="line"><span class="keyword">while</span>(i &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    a = a + b;</span><br><span class="line">    i--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>&emsp;&emsp;函数的一般形式为</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">函数值类型 函数名 (形式参数列表)</span><br><span class="line">&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;函数值类型为输出的类型，不为空时函数体需要有return语句。<br>&emsp;&emsp;形式参数列表为输入这个函数的类型。<br>&emsp;&emsp;函数体里通常为声明语句和执行语句。<br>&emsp;&emsp;<strong>一个工程里有且只有一个main函数</strong>，程序执行的时候都是从这里开始的。</p>
<h3 id="流水灯"><a href="#流水灯" class="headerlink" title="流水灯"></a>流水灯</h3><p>&emsp;&emsp;在流水灯实验前，看一下另外一种使用给P0赋值的方式点亮LED。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;reg52.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">sbit ADDR0 = P1^<span class="number">0</span>;</span><br><span class="line">sbit ADDR1 = P1^<span class="number">1</span>;</span><br><span class="line">sbit ADDR2 = P1^<span class="number">2</span>;</span><br><span class="line">sbit ADDR3 = P1^<span class="number">3</span>;</span><br><span class="line">sbit ENLED = P1^<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//执行语句</span></span><br><span class="line">    ENLED = <span class="number">0</span>;      <span class="comment">//使能U3（74HC138）的E1和E2</span></span><br><span class="line">    ADDR3 = <span class="number">1</span>;      <span class="comment">//使能U3（74HC138）的E3，使之能正常输出</span></span><br><span class="line">    ADDR2 = <span class="number">1</span>;      <span class="comment">//经U3的Y6输出来开启Q16三极管</span></span><br><span class="line">    ADDR1 = <span class="number">1</span>;</span><br><span class="line">    ADDR0 = <span class="number">0</span>;</span><br><span class="line">    P0 = <span class="number">0xFE</span>;      <span class="comment">//向P0写入数据来控制LED小灯，0xFE为1111 1110</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;要实现流水灯从左往右亮，且LED为低电平才点亮。相当于需要对P0进行了左移后进行取反。比如点亮LED1为1111 1110，点亮LED2为1111 1101。那么就相当于取反之前为0000 0001和0000 0010，即为进行了左移。只要初始设定为0000 0001后，每进行一次左移再取反即可实现流水灯的效果。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;reg52.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">sbit ADDR0 = P1^<span class="number">0</span>;</span><br><span class="line">sbit ADDR1 = P1^<span class="number">1</span>;</span><br><span class="line">sbit ADDR2 = P1^<span class="number">2</span>;</span><br><span class="line">sbit ADDR3 = P1^<span class="number">3</span>;</span><br><span class="line">sbit ENLED = P1^<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//声明语句</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> cnt = <span class="number">0</span>; <span class="comment">//用来移位控制</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>;     <span class="comment">//用来软件延时</span></span><br><span class="line">    <span class="comment">//执行语句</span></span><br><span class="line">    ENLED = <span class="number">0</span>;      <span class="comment">//使能U3（74HC138）的E1和E2</span></span><br><span class="line">    ADDR3 = <span class="number">1</span>;      <span class="comment">//使能U3（74HC138）的E3，使之能正常输出</span></span><br><span class="line">    ADDR2 = <span class="number">1</span>;      <span class="comment">//经U3的Y6输出来开启Q16三极管</span></span><br><span class="line">    ADDR1 = <span class="number">1</span>;</span><br><span class="line">    ADDR0 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        P0 = ~(<span class="number">0x01</span> &lt;&lt; cnt);        <span class="comment">//进行左移cnt位后取反即位点亮LED</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">20000</span>;i++)    <span class="comment">//延时一段时间</span></span><br><span class="line">        cnt++;                     <span class="comment">//下次循环时，移动的位数加1即为点亮下一个LED</span></span><br><span class="line">        <span class="keyword">if</span>(cnt &gt;= <span class="number">8</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt = <span class="number">0</span>;                <span class="comment">//如果移动位数超过7后需要重新计数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.bilibili.com/video/BV1RJ411k74J">手把手教你学51单片机-视频教程</a></p>
<p><a href="http://res.kingst.site/kfs/doc/%e6%89%8b%e6%8a%8a%e6%89%8b%e6%95%99%e4%bd%a0%e5%ad%a651%e5%8d%95%e7%89%87%e6%9c%ba-C%e8%af%ad%e8%a8%80%e7%89%88.pdf">手把手教你学51单片机-电子书教材</a></p>
<p><a href="http://www.qdkingst.com/cn">KingST官网</a></p>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C51</tag>
      </tags>
  </entry>
  <entry>
    <title>KingST开发板C51单片机学习笔记-Cheaper 3</title>
    <url>/2022/04/23/Study-KingST51-Cheaper3/</url>
    <content><![CDATA[<p>本篇为KingST的C51单片机的学习笔记，Cheaper 3为讲解一些硬件知识。</p>
<span id="more"></span>

<h2 id="Chapter-3-一些硬件知识"><a href="#Chapter-3-一些硬件知识" class="headerlink" title="Chapter 3 一些硬件知识"></a>Chapter 3 一些硬件知识</h2><h3 id="硬件知识"><a href="#硬件知识" class="headerlink" title="硬件知识"></a>硬件知识</h3><h4 id="去耦电容"><a href="#去耦电容" class="headerlink" title="去耦电容"></a>去耦电容</h4><p>※<strong>去耦电容的应用背景</strong></p>
<p>&emsp;&emsp;由于电磁干扰（EMI），所以需要应用去耦电容。造成电磁干扰的主要有三种形式<br>&emsp;&emsp;&emsp;①存在冬天空气干燥造成“静电放电”（ESD）<br>&emsp;&emsp;&emsp;②电机设备使用时的干扰造成“快速瞬间群脉冲”（EFT）<br>&emsp;&emsp;&emsp;③热插拔造成的“浪涌”（Surge）<br>&emsp;&emsp;基于上面的问题，所以诞生了电磁兼容（EMC）。</p>
<p>※<strong>耦电容的应用：大电容低频滤波，小电容高频滤波。</strong></p>
<p>&emsp;&emsp;大电容（如原理图电源开关电路的C19）的作用为<br>&emsp;&emsp;&emsp;①缓冲作用：上电瞬间，让电流缓慢流入电路。<br>&emsp;&emsp;&emsp;②稳定作用：后级电路功率大小不一样，所需电流也不一样，可能导致启动有先后，有电容就可以稳定整个电路的电压不会下降太多。<br>&emsp;&emsp;大电容的选取：<br>&emsp;&emsp;&emsp;第一个参数是耐压值的考虑：一般为系统电压的1.5倍到2倍（一般单片机系统为5V），有些场合可以稍微再高一点。<br>&emsp;&emsp;&emsp;第二个参数是电容容量的考虑：根据整套系统的功率消耗情况决定，如果系统耗电较大，波动可能比较大，容值就要选大一些的，反之可以小一些。</p>
<p>&emsp;&emsp;小电容（如原理图电源开关电路的C10）的作用为：滤除高频信号的干扰。一般在IC供电的地方都会加上这个小电容，在布线的时候还会考虑尽可能靠近IC。<br>&emsp;&emsp;小电容的选取：在电源处的去耦高频电容，直接选用0.1μF（104电容⇒10×10^4pF=100nF=0.1μF）。</p>
<p><img src="%E7%94%B5%E6%BA%90%E5%BC%80%E5%85%B3%E7%94%B5%E8%B7%AF.png" alt="电源开关电路"></p>
<h4 id="三极管"><a href="#三极管" class="headerlink" title="三极管"></a>三极管</h4><p>&emsp;&emsp;三极管是模拟电路和数字电路中经常会用到的一个器件，三极管可分为<strong>PNP型三极管</strong>和<strong>NPN型三极管</strong>。三极管一共有3个极，横向左侧的的引脚叫作<strong>基极b</strong>（base），中间的箭头一头连接基极，一头连接<strong>发射极e</strong>（emitter），剩下一个引脚就是<strong>集电极c</strong>（collector）。</p>
<p><img src="%E4%B8%89%E6%9E%81%E7%AE%A1.png" alt="三极管"></p>
<p>※<strong>三极管的原理</strong></p>
<p>&emsp;&emsp;三极管的关键点在于b极和e极之间的电压关系。以PNP型为例，e极电压只要高于b极电压0.7V以上，这个三极管的e极和c极之间就是顺利导通的。也可是说控制端在b和e之间，被控制端在b和c之间。如原理图所示，当P1.0处于高电平（5V）的时候，e和b之间无压降，所以三极管e和c之间不导通，LED就不亮；当P1.0处于低电平（0V）的时候，e和b之间有压降且大于0.7V，三极管e和c之间导通，LED就亮。（e和c之间大概会有0.2V的压降）</p>
<p><img src="%E4%B8%89%E6%9E%81%E7%AE%A1%E7%9A%84%E7%94%A8%E6%B3%95.png" alt="三极管的用法"></p>
<p>&emsp;&emsp;三极管有三种状态：<strong>截止状态</strong>，<strong>饱和状态</strong>和<strong>放大状态</strong>。通常截止和饱和在数字电路上用的比较多，放大在模拟电路上用的比较多。<br>&emsp;&emsp;&emsp;截止状态：e和b之间不导通。<br>&emsp;&emsp;&emsp;饱和状态：e和b之间导通，且b极的电流要大于ec间的电流除以β（β为三极管的放大倍数，常用的大概可以认为是100）。<br>&emsp;&emsp;&emsp;放大状态：e和b之间导通，且b极的电流要等于ec间的电流除以β。</p>
<p>&emsp;&emsp;上图LED的压降为2V，ec之间的压降为0.2V（先忽略不计），则R41的压降为3V，因此，ec之间的电流为3mA。如果eb要导通，那么eb间的最小电流就是30μA，那么R47最大的阻值为4.3V（5V减去0.7V的压降）除以30μA，为143kΩ。R47只要小于这个阻值就行了，但也不能过于小，单片机的IO输入电流太大会烧坏，STC89C52的最大输入电流推荐小于6mA。</p>
<p>※<strong>三极管的应用</strong></p>
<p>&emsp;&emsp;三极管的控制应用：<strong>控制应用</strong>，<strong>驱动应用</strong><br>&emsp;&emsp;&emsp;控制应用：如图所示为NPN型三极管，当IO口输出5V高电平的时候，三极管导通，OUT输出低电平；当IO口输出0V低电平的时候，三极管截止，OUT则由于上拉电阻R2的作用而输出12V的高电平。</p>
<p><img src="%E4%B8%89%E6%9E%81%E7%AE%A1%E7%9A%84%E6%8E%A7%E5%88%B6%E5%BA%94%E7%94%A8.png" alt="三极管的控制应用"></p>
<p>&emsp;&emsp;&emsp;驱动应用：如图IO口直接驱动LED的话，第一种方式IO口电流承受能力有限，一般为6mA，如果LED数量多了，单片机就会受不了。第二种方式IO口电流输出能力有限，一般不到1mA，LED可能点不亮或者亮度很低。</p>
<p><img src="IO%E7%9B%B4%E6%8E%A5%E9%A9%B1%E5%8A%A8LED.png" alt="IO直接驱动LED"></p>
<p>&emsp;&emsp;&emsp;所以就需要用三极管来驱动，如图所示为NPN型三极管来驱动LED，当IO口是高电平的时候，三极管导通，LED就能够被点亮了（9013三极管可以通过500mA的电流）。</p>
<p><img src="%E4%B8%89%E6%9E%81%E7%AE%A1%E9%A9%B1%E5%8A%A8LED.png" alt="三极管驱动LED"></p>
<h4 id="74HC245"><a href="#74HC245" class="headerlink" title="74HC245"></a>74HC245</h4><p>&emsp;&emsp;<strong>74HC245是个双向缓冲器</strong>。如果LED多起来的话，总体的电流也相当高，所以需要一个缓冲器来缓冲电流。<br>&emsp;&emsp;其中1号引脚DIR为方向引脚，如果DIR为高电平，右侧B编号引脚的电压等于左侧A编号引脚对应的电压；如果DIR为低电平，左侧A编号引脚的电压等于右侧B编号引脚对应的电压。<br>&emsp;&emsp;19号引脚OE为使能引脚，叫作输出使能，引脚上的一横表示这个引脚为低电平有效，即OE引脚接低电平时，芯片才工作。</p>
<p><img src="74HC245.png" alt="74HC245"></p>
<h4 id="74HC138（三八译码器）"><a href="#74HC138（三八译码器）" class="headerlink" title="74HC138（三八译码器）"></a>74HC138（三八译码器）</h4><p>&emsp;&emsp;<strong>74HC138是一种数字芯片，它可以由简单的输入逻辑来控制逻辑输出</strong>三八译码器，就是可以吧3种输入状态翻译成8种输出状态。<br>&emsp;&emsp;其中4号引脚E1、5号引脚E2和6号引脚E3为使能引脚，当E1和E2为低电平，E3为高电平时，芯片才工作。<br>&emsp;&emsp;其中A0、A1、A2为输入端，Y0-Y7为输出端。</p>
<p><img src="74HC138.png" alt="74HC138"></p>
<p>*以下为74HC138的输入输出端的真值表</p>
<table>
<thead>
<tr>
<th>A2</th>
<th>A1</th>
<th>A0</th>
<th>⇒</th>
<th>Y0</th>
<th>Y1</th>
<th>Y2</th>
<th>Y3</th>
<th>Y4</th>
<th>Y5</th>
<th>Y6</th>
<th>Y7</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>⇒</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>1</td>
<td>⇒</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
<td>⇒</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
<td>⇒</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
<td>⇒</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
<td>⇒</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
<td>⇒</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
<td>⇒</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
</tbody></table>
<h3 id="闪烁LED"><a href="#闪烁LED" class="headerlink" title="闪烁LED"></a>闪烁LED</h3><p>&emsp;&emsp;根据开发板的原理图编写程序。如图所示</p>
<p><img src="LED%E5%B0%8F%E7%81%AF%E6%95%B4%E4%BD%93%E7%94%B5%E8%B7%AF%E5%9B%BE.png" alt="LED小灯整体电路图"></p>
<p>&emsp;&emsp;如LED小灯整体电路图所示要让LED2点亮的话，Q16三极管需要导通，且DB0为低电平。<br>&emsp;&emsp;Q16三极管需要导通的话基极为低电平，即LEDS6需要为低电平，即74HC138的9号引脚Y6输出低电平。查真值表可知，需要A2为高电平，A1为高电平，A0为低电平，即ADDR2为高电平，ADDR1为高电平，ADDR0为低电平。同时要让74HC138芯片工作，需要ADDR3为高电平，ENLED为低电平。根据图显示译码和步进电机跳线和单片机电路图所示，即为单片机的P1.0需要低电平，P1.1需要高电平，P1.2需要高电平，P1.3需要高电平，P1.4需要低电平。这时三极管就导通了。<br>&emsp;&emsp;DB0连接74HC245的右侧引脚B1，要使B1为低电平的话需要左侧引脚A1为低电平，即DB_0为低电平。DB_0连接到单片机的P0.0引脚上，即P0.0需要低电平，LED就亮。</p>
<p><img src="%E6%98%BE%E7%A4%BA%E8%AF%91%E7%A0%81%E5%92%8C%E6%AD%A5%E8%BF%9B%E7%94%B5%E6%9C%BA%E8%B7%B3%E7%BA%BF.png" alt="显示译码和步进电机跳线"></p>
<p><img src="%E5%8D%95%E7%89%87%E6%9C%BA%E7%94%B5%E8%B7%AF.png" alt="单片机电路"></p>
<p>最终的闪烁程序：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;reg52.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">sbit LED = P0^<span class="number">0</span>;</span><br><span class="line">sbit ADDR0 = P1^<span class="number">0</span>;</span><br><span class="line">sbit ADDR1 = P1^<span class="number">1</span>;</span><br><span class="line">sbit ADDR2 = P1^<span class="number">2</span>;</span><br><span class="line">sbit ADDR3 = P1^<span class="number">3</span>;</span><br><span class="line">sbit ENLED = P1^<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>;     <span class="comment">//旧版本C语言需要在最上面定义变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//以下为执行语句</span></span><br><span class="line">    ENLED = <span class="number">0</span>;      <span class="comment">//使能U3（74HC138）的E1和E2</span></span><br><span class="line">    ADDR3 = <span class="number">1</span>;      <span class="comment">//使能U3（74HC138）的E3，使之能正常输出</span></span><br><span class="line">    ADDR2 = <span class="number">1</span>;      <span class="comment">//经U3的Y6输出来开启Q16三极管</span></span><br><span class="line">    ADDR1 = <span class="number">1</span>;</span><br><span class="line">    ADDR0 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        LED = <span class="number">0</span>;                    <span class="comment">//点亮小灯</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">30000</span>;i++);   <span class="comment">//延时一段时间</span></span><br><span class="line">        LED = <span class="number">1</span>;                    <span class="comment">//熄灭小灯</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">30000</span>;i++);   <span class="comment">//延时一段时间</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.bilibili.com/video/BV1RJ411k74J">手把手教你学51单片机-视频教程</a></p>
<p><a href="http://res.kingst.site/kfs/doc/%e6%89%8b%e6%8a%8a%e6%89%8b%e6%95%99%e4%bd%a0%e5%ad%a651%e5%8d%95%e7%89%87%e6%9c%ba-C%e8%af%ad%e8%a8%80%e7%89%88.pdf">手把手教你学51单片机-电子书教材</a></p>
<p><a href="http://www.qdkingst.com/cn">KingST官网</a></p>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C51</tag>
      </tags>
  </entry>
  <entry>
    <title>KingST开发板C51单片机学习笔记-Cheaper 2</title>
    <url>/2022/04/19/Study-KingST51-Cheaper2/</url>
    <content><![CDATA[<p>本篇为KingST的C51单片机的学习笔记，Cheaper 2为讲解点亮LED。</p>
<span id="more"></span>

<h2 id="Chapter-2-点亮LED"><a href="#Chapter-2-点亮LED" class="headerlink" title="Chapter 2 点亮LED"></a>Chapter 2 点亮LED</h2><h3 id="LED硬件"><a href="#LED硬件" class="headerlink" title="LED硬件"></a>LED硬件</h3><h4 id="发光二极管"><a href="#发光二极管" class="headerlink" title="发光二极管"></a>发光二极管</h4><p>&emsp;&emsp;LED即为发光二极管，这种二极管通常的正向导通电压是1.8-2.2V，工作电流一般在1-20mA。<br>&emsp;&emsp;其中，当电流在1-5mA之间变化时，随着通过LED的电流越大，灯越亮。<br>&emsp;&emsp;而当电流从5-20mA之间变化时，LED亮度变化不大。当电流超过20mA时，LED会有烧坏的风险。</p>
<h4 id="限流电阻"><a href="#限流电阻" class="headerlink" title="限流电阻"></a>限流电阻</h4><p>&emsp;&emsp;单片机一般接入VCC的电压是5V，发光二级管的工作自身压降大概是2V，所以就需要电阻来串联分走3V的电压，要求这条路电流范围是1-20mA的话，电阻R的取值范围是150-3kΩ（如原理图USB接口电路的R34为1kΩ），这个电阻直接限制通路的电流大小，因此这个电阻通常称之为 <strong>“限流电阻”</strong>。（图F1为自恢复保险丝）</p>
<p><img src="USB%E6%8E%A5%E5%8F%A3%E7%94%B5%E8%B7%AF.png" alt="USB接口电路"></p>
<h3 id="C51特殊语法"><a href="#C51特殊语法" class="headerlink" title="C51特殊语法"></a>C51特殊语法</h3><h4 id="sfr"><a href="#sfr" class="headerlink" title="sfr"></a>sfr</h4><p>&emsp;&emsp;sfr是关键字，它的作用是定义一个单片机特殊功能寄存器，单片机内部有很多寄存器，如果想使用的话必须提前进行声明。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sfr P0 = <span class="number">0x80</span>；    <span class="comment">//查看手册映射(P0,P1,P2,P3,P4)</span></span><br></pre></td></tr></table></figure>

<p>Keil软件已经将这些声明都写好了，所以用的时候文件开头添加一行</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;reg52.h&gt;</span>  <span class="comment">//内含标准51的映射，加强型51的映射需要使用sfr</span></span></span><br></pre></td></tr></table></figure>

<h4 id="sbit"><a href="#sbit" class="headerlink" title="sbit"></a>sbit</h4><p>&emsp;&emsp;sbit是关键字，sfr为映射了一个字节，sbit的作用是单独控制一位。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sbit LED = P0^<span class="number">0</span>;    <span class="comment">//LED就表示P0.0这一位</span></span><br></pre></td></tr></table></figure>

<h3 id="LED程序"><a href="#LED程序" class="headerlink" title="LED程序"></a>LED程序</h3><p>一般为了防止程序出错，会在程序结尾加入死循环，让程序停在所希望的位置。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);   <span class="comment">//程序停止在这里，写在程序的最后</span></span><br></pre></td></tr></table></figure>

<p>最终的点亮程序：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;reg52.h&gt;</span>  <span class="comment">//包含特殊功能寄存器定义的头文件</span></span></span><br><span class="line"></span><br><span class="line">sbit LED = P0^<span class="number">0</span>;    <span class="comment">//位地址声明</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>     <span class="comment">//主函数入口</span></span><br><span class="line">&#123;</span><br><span class="line">    LED = <span class="number">0</span>;    <span class="comment">//将LED(P0.0)置为低电平，根据原理图决定LED的亮灭</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);   <span class="comment">//死循环，程序停在这里</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;reg52.h&gt;</span>  <span class="comment">//包含特殊功能寄存器定义的头文件</span></span></span><br><span class="line"></span><br><span class="line">sbit LED = P0^<span class="number">0</span>;    <span class="comment">//位地址声明</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>     <span class="comment">//主函数入口</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)    <span class="comment">//进入循环</span></span><br><span class="line">    &#123;</span><br><span class="line">        LED = <span class="number">0</span>;    <span class="comment">//将LED(P0.0)置为低电平，根据原理图决定LED的亮灭</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="%E7%82%B9%E4%BA%AELED.png" alt="点亮LED"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.bilibili.com/video/BV1RJ411k74J">手把手教你学51单片机-视频教程</a></p>
<p><a href="http://res.kingst.site/kfs/doc/%e6%89%8b%e6%8a%8a%e6%89%8b%e6%95%99%e4%bd%a0%e5%ad%a651%e5%8d%95%e7%89%87%e6%9c%ba-C%e8%af%ad%e8%a8%80%e7%89%88.pdf">手把手教你学51单片机-电子书教材</a></p>
<p><a href="http://www.qdkingst.com/cn">KingST官网</a></p>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C51</tag>
      </tags>
  </entry>
  <entry>
    <title>git的常用指令</title>
    <url>/2022/04/19/git_Common_dir/</url>
    <content><![CDATA[<p>我个人觉得还算比较常用的git指令。包含添加文件到本地仓库和连接远程仓库等等</p>
<span id="more"></span>

<h2 id="本地仓库相关"><a href="#本地仓库相关" class="headerlink" title="本地仓库相关"></a>本地仓库相关</h2><h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<h3 id="将文件添加到缓冲区"><a href="#将文件添加到缓冲区" class="headerlink" title="将文件添加到缓冲区"></a>将文件添加到缓冲区</h3><p>将单个文件添加到缓冲区（如test.txt)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add test.txt</span><br></pre></td></tr></table></figure>

<p>将整个文件夹添加到缓冲区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>

<h3 id="将缓冲区文件内容添加到本地仓库"><a href="#将缓冲区文件内容添加到本地仓库" class="headerlink" title="将缓冲区文件内容添加到本地仓库"></a>将缓冲区文件内容添加到本地仓库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;message&quot;</span><br></pre></td></tr></table></figure>

<h3 id="查看仓库状态"><a href="#查看仓库状态" class="headerlink" title="查看仓库状态"></a>查看仓库状态</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<h3 id="查看仓库日志"><a href="#查看仓库日志" class="headerlink" title="查看仓库日志"></a>查看仓库日志</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>

<h2 id="本地仓库和远程仓库的关联"><a href="#本地仓库和远程仓库的关联" class="headerlink" title="本地仓库和远程仓库的关联"></a>本地仓库和远程仓库的关联</h2><h3 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add gite git@gitee.com:(SSH的内容)).git</span><br><span class="line">git remote add github git@github.com:(SSH的内容)).git</span><br></pre></td></tr></table></figure>

<h3 id="查看远程仓库的关联有没有被添加"><a href="#查看远程仓库的关联有没有被添加" class="headerlink" title="查看远程仓库的关联有没有被添加"></a>查看远程仓库的关联有没有被添加</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>

<h3 id="删除远程仓库的关联"><a href="#删除远程仓库的关联" class="headerlink" title="删除远程仓库的关联"></a>删除远程仓库的关联</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote rm gitee（或者github）</span><br></pre></td></tr></table></figure>

<h2 id="远程仓库相关"><a href="#远程仓库相关" class="headerlink" title="远程仓库相关"></a>远程仓库相关</h2><h3 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone [url]</span><br></pre></td></tr></table></figure>

<h3 id="上传到远程仓库并合并"><a href="#上传到远程仓库并合并" class="headerlink" title="上传到远程仓库并合并"></a>上传到远程仓库并合并</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push github master</span><br><span class="line">git push gitee master</span><br></pre></td></tr></table></figure>

<h3 id="下载到远程仓库并合并"><a href="#下载到远程仓库并合并" class="headerlink" title="下载到远程仓库并合并"></a>下载到远程仓库并合并</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull github master</span><br><span class="line">git pull gitee master</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.runoob.com/git/git-tutorial.html">git菜鸟教程</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/369486197">还不会使用 GitHub ？ GitHub 教程来了！万字图文详解</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/103391101">个人博客第3篇——绑定GitHub并提交文件</a></p>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>KingST开发板C51单片机学习笔记-Cheaper 1</title>
    <url>/2022/04/19/Study-KingST51-Cheaper1/</url>
    <content><![CDATA[<p>本篇为KingST的C51单片机的学习笔记，Cheaper 1为讲解单片机的基础知识。</p>
<span id="more"></span>

<h2 id="Chapter-1-单片机基础知识"><a href="#Chapter-1-单片机基础知识" class="headerlink" title="Chapter 1 单片机基础知识"></a>Chapter 1 单片机基础知识</h2><h3 id="单片机的内部资源"><a href="#单片机的内部资源" class="headerlink" title="单片机的内部资源"></a>单片机的内部资源</h3><h4 id="Flash"><a href="#Flash" class="headerlink" title="Flash"></a>Flash</h4><p>&emsp;&emsp;<strong>Flash是程序存储空间</strong>，早期单片机是OTPROM。Flash以其可以重复擦写且容量大成本低的优点为现在绝大多数单片机的程序存储器。Flash最大的意义是断电后数据不丢失。</p>
<h4 id="RAM"><a href="#RAM" class="headerlink" title="RAM"></a>RAM</h4><p>&emsp;&emsp;<strong>RAM是单片机的数据存储空间</strong>，用来存储程序运行过程中产生和需要的数据，跟计算机的内存是相似的概念。RAM的特点是断电后数据丢失。</p>
<h4 id="SFR"><a href="#SFR" class="headerlink" title="SFR"></a>SFR</h4><p>&emsp;&emsp;<strong>SFR是特殊功能寄存器</strong>，SFR为用户通过对SFR的读写来实现单片机的多种多样的功能。<br>&emsp;&emsp;STC89C52是标准的51体系结构，它的资源为Flash程序空间8K字节，RAM数据空间是512字节，SFR特殊功能寄存器为3个运算器相关的寄存器，3个指针类寄存器，7个口相关的寄存器，2个中断相关的寄存器，6个定时器/计数器相关的寄存器。</p>
<h3 id="单片机最小系统"><a href="#单片机最小系统" class="headerlink" title="单片机最小系统"></a>单片机最小系统</h3><p>单片机最小系统的三要素就是<strong>电源</strong>，<strong>晶振</strong>和<strong>复位电路</strong></p>
<h4 id="电源"><a href="#电源" class="headerlink" title="电源"></a>电源</h4><p>&emsp;&emsp;目前主流单片机的电源分为5V和3.3V两个标准。STC89C52为5V直流电。+5V通常也称为VCC或者VDD，代表电源正极，GND代表电源的负极。（如原理图单片机供电电路）</p>
<p><img src="%E5%8D%95%E7%89%87%E6%9C%BA%E4%BE%9B%E7%94%B5%E7%94%B5%E8%B7%AF.png" alt="单片机供电电路"></p>
<h4 id="晶振"><a href="#晶振" class="headerlink" title="晶振"></a>晶振</h4><p>&emsp;&emsp;<strong>晶振的作用就是为单片机系统提供基准时钟信号。</strong><br>单片机的18引脚和19引脚（如原理图单片机晶振电路）接了一个11.0592MHz的晶振（它每秒振荡11059200次），外加两个20pF的电容， <strong>电容的作用是帮助晶振起振，并维持振荡信号的稳定。</strong></p>
<p><img src="%E5%8D%95%E7%89%87%E6%9C%BA%E5%A4%96%E9%83%A8%E6%99%B6%E6%8C%AF%E7%94%B5%E8%B7%AF.png" alt="单片机外部晶振电路"></p>
<h4 id="复位电路"><a href="#复位电路" class="headerlink" title="复位电路"></a>复位电路</h4><p>&emsp;&emsp;单片机复位一般分为三种情况：上电复位，手动复位和程序自动复位。（如原理图单片机复位电路）</p>
<p><img src="%E5%8D%95%E7%89%87%E6%9C%BA%E5%A4%8D%E4%BD%8D%E7%94%B5%E8%B7%AF.png" alt="单片机复位电路"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.bilibili.com/video/BV1RJ411k74J">手把手教你学51单片机-视频教程</a></p>
<p><a href="http://res.kingst.site/kfs/doc/%e6%89%8b%e6%8a%8a%e6%89%8b%e6%95%99%e4%bd%a0%e5%ad%a651%e5%8d%95%e7%89%87%e6%9c%ba-C%e8%af%ad%e8%a8%80%e7%89%88.pdf">手把手教你学51单片机-电子书教材</a></p>
<p><a href="http://www.qdkingst.com/cn">KingST官网</a></p>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C51</tag>
      </tags>
  </entry>
</search>
